     1 00000000                                 ;汇编语言实现与底层硬件的交互逻辑,用C调用底层硬件接口实现上层逻辑
     2 00000000                                 ;nask_func
     3 00000000                                 ;TAB = 4
     4 00000000                                 
     5 00000000                                 ;提供该接口文件信息
     6 00000000                                 [FORMAT "WCOFF"]                        ;制作目标文件的格式
     7 00000000                                 [bits 32]                               ;制作32位模式的机器语言
     8 00000000                                 [instrset "i486p"]                      ; for 486(using nask)
     9 00000000                                 [FILE "naskfunc.nas"]                   ;源文件名
    10 00000000                                 
    11 00000000                                 GLOBAL          _io_hlt                     ;程序中包含的函数名       
    12 00000000                                 GLOBAL          _io_cli,_io_sti,_io_stihlt
    13 00000000                                 GLOBAL          _io_in8,_io_in16,_io_in32
    14 00000000                                 GLOBAL          _io_out8,_io_out16,_io_out32
    15 00000000                                 GLOBAL          _io_load_eflags,_io_store_eflags         
    16 00000000                                 GLOBAL          _load_gdtr,_load_idtr
    17 00000000                                 GLOBAL          _asm_inthandler21,_asm_inthandler27,_asm_inthandler2c
    18 00000000                                 EXTERN          _inthandler21,_inthandler27,_inthandler2c       ;中断处理程序 ,extern表示函数声明在外部   
    19                                          [SECTION .text]
    20 00000000                                 _io_hlt:                                ;void io_hlt(void),函数声明+定义
    21 00000000 F4                                      hlt
    22 00000001 C3                                      RET                             
    23 00000002                                 _io_cli:                                ;中断标志置为0
    24 00000002 FA                                      cli
    25 00000003 C3                                      RET
    26 00000004                                 _io_sti:                                ;中断标志置为1
    27 00000004 FB                                      sti
    28 00000005 C3                                      RET     
    29 00000006                                 _io_stihlt:
    30 00000006 8B 54 24 04                             mov     edx,[esp+4]
    31 0000000A B8 00000000                             mov     eax,0
    32 0000000F EC                                      in      al,dx
    33 00000010 C3                                      RET
    34 00000011                                 _io_in8:
    35 00000011 8B 54 24 04                             mov     edx,[esp+4]
    36 00000015 B8 00000000                             mov     eax,0
    37 0000001A EC                                      in      al,dx
    38 0000001B                                 _io_in16:
    39 0000001B 8B 54 24 04                             mov     edx,[esp+4]
    40 0000001F B8 00000000                             mov     eax,0
    41 00000024 66 ED                                   in      ax,dx
    42 00000026 C3                                      RET
    43 00000027                                 _io_in32:
    44 00000027 8B 54 24 04                             mov     edx,[esp+4]
    45 0000002B B8 00000000                             mov     eax,0
    46 00000030                                 _io_out8:             
    47 00000030 8B 54 24 04                             mov     edx,[esp+4]
    48 00000034 8A 44 24 08                             mov     al,[esp+8]
    49 00000038 EE                                      out     dx,al
    50 00000039 C3                                      RET    
    51 0000003A                                 _io_out16:
    52 0000003A 8B 54 24 04                             mov     edx,[esp+4]
    53 0000003E 8B 44 24 08                             mov     eax,[esp+8]
    54 00000042 66 EF                                   out     dx,ax
    55 00000044 C3                                      RET
    56 00000045                                 _io_out32:
    57 00000045 8B 54 24 04                             mov     edx,[esp+4]
    58 00000049 8B 44 24 08                             mov     eax,[esp+8]
    59 0000004D EF                                      out     dx,EAX
    60 0000004E C3                                      RET
    61 0000004F                                 _io_load_eflags:                
    62 0000004F 9C                                      pushfd                  
    63 00000050 58                                      pop     eax             
    64 00000051 C3                                      RET
    65 00000052                                 _io_store_eflags:
    66 00000052 8B 44 24 04                             mov     eax,[esp+4]     ;esp栈底指针
    67 00000056 50                                      push    eax
    68 00000057 9D                                      popfd
    69 00000058 C3                                      RET        
    70 00000059                                 _load_gdtr:
    71 00000059 66 8B 44 24 04                          mov     ax,[esp+4]
    72 0000005E 66 89 44 24 06                          mov     [esp+6],ax
    73 00000063 0F 01 54 24 06                          lgdt    [esp+6]
    74 00000068 C3                                      RET
    75 00000069                                 _load_idtr:
    76 00000069 66 8B 44 24 04                          mov     ax,[esp+4]
    77 0000006E 66 89 44 24 06                          mov     [esp+6],ax
    78 00000073 0F 01 5C 24 06                          lidt    [esp+6]
    79 00000078 C3                                      RET
    80 00000079                                 ;中断信号处理器(PIC)
    81 00000079                                 _asm_inthandler21:                      ;使用栈结构将寄存器返回中断前状态
    82 00000079 06                                      push    ES
    83 0000007A 1E                                      push    DS
    84 0000007B 60                                      PUSHAD
    85 0000007C 89 E0                                   mov     EAX,ESP
    86 0000007E 50                                      push    EAX
    87 0000007F 66 8C D0                                mov     ax,SS
    88 00000082 8E D8                                   mov     ds,ax
    89 00000084 8E C0                                   mov     es,ax
    90 00000086 E8 [00000000]                           call    _inthandler21
    91 0000008B 58                                      pop     eax
    92 0000008C 61                                      POPAD
    93 0000008D 1F                                      pop     ds
    94 0000008E 07                                      pop     es
    95 0000008F CF                                      IRETD                           ;中断程序中只能使用IRETD返回
    96 00000090                                 _asm_inthandler27:                      
    97 00000090 06                                      push    ES
    98 00000091 1E                                      push    DS
    99 00000092 60                                      PUSHAD
   100 00000093 89 E0                                   mov     EAX,esp
   101 00000095 50                                      push    EAX
   102 00000096 66 8C D0                                mov     ax,SS
   103 00000099 8E D8                                   mov     ds,ax
   104 0000009B 8E C0                                   mov     es,ax
   105 0000009D E8 [00000000]                           call    _inthandler27
   106 000000A2 58                                      pop     eax
   107 000000A3 61                                      POPAD
   108 000000A4 1F                                      pop     ds
   109 000000A5 07                                      pop     es
   110 000000A6 CF                                      IRETD                           
   111 000000A7                                  
   112 000000A7                                  _asm_inthandler2c:                      
   113 000000A7 06                                      push    ES
   114 000000A8 1E                                      push    DS
   115 000000A9 60                                      PUSHAD
   116 000000AA 89 E0                                   mov     EAX,esp
   117 000000AC 50                                      push    EAX
   118 000000AD 66 8C D0                                mov     ax,SS
   119 000000B0 8E D8                                   mov     ds,ax
   120 000000B2 8E C0                                   mov     es,ax
   121 000000B4 E8 [00000000]                           call    _inthandler2c
   122 000000B9 58                                      pop     eax
   123 000000BA 61                                      POPAD
   124 000000BB 1F                                      pop     ds
   125 000000BC 07                                      pop     es
   126 000000BD CF                                      IRETD                           
   127 000000BE                                  