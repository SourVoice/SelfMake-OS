     1 00000000                                 ;说明:这部分配置了32位保护模式,并使得C语言能够导入,这部分新增代码以后讲解(内核部分)
     2 00000000                                 
     3 00000000                                 ;os
     4 00000000                                 ;TAB=4
     5 00000000                                 ;BIOS-INFO,这部分内容放到内存0x0ff0处,作为操作系统的设置
     6 00000000                                 
     7 00000000                                 ;根据函数入口地址调节32位模式,这TM都没讲保护模式的进入，我都没法用gcc连接目标文件
     8 00000000                                 
     9  = 00280000                              BOTPAK	EQU		0x00280000		; 加载bootpack
    10  = 00100000                              DSKCAC	EQU		0x00100000		; 磁盘缓存的位置
    11  = 00008000                              DSKCAC0	EQU		0x00008000		; 磁盘缓存的位置（实模式）
    12 00000000                                 
    13 00000000                                 ; BOOT_INFO相关
    14  = 00000FF0                              CYLS	EQU		0x0ff0			; 引导扇区设置
    15  = 00000FF1                              LEDS	EQU		0x0ff1
    16  = 00000FF2                              VMODE	EQU		0x0ff2			; 关于颜色的信息
    17  = 00000FF4                              SCRNX	EQU		0x0ff4			; 分辨率X
    18  = 00000FF6                              SCRNY	EQU		0x0ff6			; 分辨率Y
    19  = 00000FF8                              VRAM	EQU		0x0ff8			; 图像缓冲区的起始地址
    20 00000000                                 
    21                                          		ORG		0xc200			;  这个的程序要被装载的内存地址
    22 0000C200                                 
    23 0000C200                                 ; 画面(屏幕设定)
    24 0000C200                                 
    25 0000C200 BB 4101                         		MOV		BX,0x4101			; VBE的640x480x8bi色彩
    26 0000C203 B8 4F02                         		MOV		AX,0x4f02			; 切换高分辨模式
    27 0000C206 CD 10                           		INT		0x10
    28 0000C208 C6 06 0FF2 08                   		MOV		BYTE [VMODE],8		; 屏幕的模式,8bit（参考C语言的引用）
    29 0000C20D C7 06 0FF4 0280                 		MOV		WORD [SCRNX],640
    30 0000C213 C7 06 0FF6 01E0                 		MOV		WORD [SCRNY],480
    31 0000C219 66 C7 06 0FF8 E0000000          		MOV		DWORD [VRAM],0xe0000000
    32 0000C222                                 
    33 0000C222                                 ; 通过BIOS获取指示灯状态
    34 0000C222                                 
    35 0000C222 B4 02                           		MOV		AH,0x02
    36 0000C224 CD 16                           		INT		0x16 			; keyboard BIOS
    37 0000C226 A2 0FF1                         		MOV		[LEDS],AL
    38 0000C229                                 
    39 0000C229                                 ; 防止PIC接受所有中断(执行报护模式转换时屏蔽所有中断)
    40 0000C229                                 ;	AT兼容机的规范、PIC初始化
    41 0000C229                                 ;	然后之前在CLI不做任何事就挂起
    42 0000C229                                 ;	PIC在同意后初始化
    43 0000C229                                 
    44 0000C229 B0 FF                           		MOV		AL,0xff
    45 0000C22B E6 21                           		OUT		0x21,AL			;禁止从主PIC的全部中断
    46 0000C22D 90                              		NOP						; 不断执行OUT指令
    47 0000C22E E6 A1                           		OUT		0xa1,AL			;禁止从从PIC的全部中断
    48 0000C230                                 
    49 0000C230 FA                              		CLI						; 进一步中断CPU
    50 0000C231                                 
    51 0000C231                                 ; 让CPU支持1M以上内存、设置A20GATE
    52 0000C231                                 ;CPU在16位模式下最大内存只有1MB
    53 0000C231                                 ;以下使内存可用
    54 0000C231 E8 00B5                         		CALL	waitkbdout
    55 0000C234 B0 D1                           		MOV		AL,0xd1
    56 0000C236 E6 64                           		OUT		0x64,AL
    57 0000C238 E8 00AE                         		CALL	waitkbdout
    58 0000C23B B0 DF                           		MOV		AL,0xdf			; enable A20
    59 0000C23D E6 60                           		OUT		0x60,AL
    60 0000C23F E8 00A7                         		CALL	waitkbdout
    61 0000C242                                 
    62 0000C242                                 ; 保护模式转换(就是这里!!被坑了)
    63 0000C242                                 
    64 0000C242                                 [INSTRSET "i486p"]				; 说明使用486指令(可以使用LGDT,EAX,CR0等32位有关指令)
    65 0000C242                                 
    66 0000C242 0F 01 16 C32A                   		LGDT	[GDTR0]			; 设置临时GDT
    67 0000C247 0F 20 C0                        		MOV		EAX,CR0
    68 0000C24A 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; 使用bit31（禁用分页）
    69 0000C250 66 83 C8 01                     		OR		EAX,0x00000001	; bit0到1转换（保护模式过渡）
    70 0000C254 0F 22 C0                        		MOV		CR0,EAX			;通过CR0切换到保护模式
    71 0000C257 EB 00                           		JMP		pipelineflush
    72 0000C259                                 pipelineflush:
    73 0000C259 B8 0008                         		MOV		AX,1*8			;  写32bit的段
    74 0000C25C 8E D8                           		MOV		DS,AX
    75 0000C25E 8E C0                           		MOV		ES,AX
    76 0000C260 8E E0                           		MOV		FS,AX
    77 0000C262 8E E8                           		MOV		GS,AX
    78 0000C264 8E D0                           		MOV		SS,AX
    79 0000C266                                 
    80 0000C266                                 ; bootpack传递
    81 0000C266                                 
    82 0000C266 66 BE 0000C330                  		MOV		ESI,bootpack	; 源
    83 0000C26C 66 BF 00280000                  		MOV		EDI,BOTPAK		; 目标
    84 0000C272 66 B9 00020000                  		MOV		ECX,512*1024/4
    85 0000C278 E8 0075                         		CALL	memcpy
    86 0000C27B                                 
    87 0000C27B                                 ; 传输磁盘数据
    88 0000C27B                                 
    89 0000C27B                                 ; 从引导区开始
    90 0000C27B                                 
    91 0000C27B 66 BE 00007C00                  		MOV		ESI,0x7c00		; 源
    92 0000C281 66 BF 00100000                  		MOV		EDI,DSKCAC		; 目标
    93 0000C287 66 B9 00000080                  		MOV		ECX,512/4
    94 0000C28D E8 0060                         		CALL	memcpy
    95 0000C290                                 
    96 0000C290                                 ; 剩余的全部
    97 0000C290                                 
    98 0000C290 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; 源
    99 0000C296 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; 目标
   100 0000C29C 66 B9 00000000                  		MOV		ECX,0
   101 0000C2A2 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
   102 0000C2A6 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	; 除以4得到字节数
   103 0000C2AD 66 81 E9 00000080               		SUB		ECX,512/4		; IPL偏移量
   104 0000C2B4 E8 0039                         		CALL	memcpy
   105 0000C2B7                                 
   106 0000C2B7                                 ; 由于还需要asmhead才能完成
   107 0000C2B7                                 ; 完成其余的bootpack任务
   108 0000C2B7                                 
   109 0000C2B7                                 ; bootpack启动
   110 0000C2B7                                 
   111 0000C2B7 66 BB 00280000                  		MOV		EBX,BOTPAK
   112 0000C2BD 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
   113 0000C2C2 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
   114 0000C2C6 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4;
   115 0000C2CA 74 10                           		JZ		skip			; 传输完成
   116 0000C2CC 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 源
   117 0000C2D1 66 01 DE                        		ADD		ESI,EBX
   118 0000C2D4 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 目标
   119 0000C2D9 E8 0014                         		CALL	memcpy
   120 0000C2DC                                 skip:
   121 0000C2DC 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; 堆栈的初始化
   122 0000C2E1 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b
   123 0000C2E9                                 
   124 0000C2E9                                 waitkbdout:
   125 0000C2E9 E4 64                           		IN		 AL,0x64
   126 0000C2EB 24 02                           		AND		 AL,0x02
   127 0000C2ED 75 FA                           		JNZ		waitkbdout		; AND结果不为0跳转到waitkbdout
   128 0000C2EF C3                              		RET
   129 0000C2F0                                 
   130 0000C2F0                                 memcpy:
   131 0000C2F0 67 66 8B 06                     		MOV		EAX,[ESI]
   132 0000C2F4 66 83 C6 04                     		ADD		ESI,4
   133 0000C2F8 67 66 89 07                     		MOV		[EDI],EAX
   134 0000C2FC 66 83 C7 04                     		ADD		EDI,4
   135 0000C300 66 83 E9 01                     		SUB		ECX,1
   136 0000C304 75 EA                           		JNZ		memcpy			; 运算结果不为0跳转到memcpy
   137 0000C306 C3                              		RET
   138 0000C307                                 ; memcpy地址前缀大小
   139 0000C307                                 
   140 0000C307 00 00 00 00 00 00 00 00 00      		ALIGNB	16
   141 0000C310                                 GDT0:
   142 0000C310 00 00 00 00 00 00 00 00         		RESB	8				; 初始值
   143 0000C318 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	; 写32bit位段寄存器
   144 0000C320 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	; 可执行的文件的32bit寄存器（bootpack用）
   145 0000C328                                 
   146 0000C328 0000                            		DW		0
   147 0000C32A                                 GDTR0:
   148 0000C32A 0017                            		DW		8*3-1
   149 0000C32C 0000C310                        		DD		GDT0
   150 0000C330                                 
   151 0000C330                                 		ALIGNB	16
   152 0000C330                                 bootpack:
