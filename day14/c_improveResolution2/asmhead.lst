     1 00000000                                 ;说明:这部分配置了32位保护模式,并使得C语言能够导入,这部分新增代码以后讲解(内核部分)
     2 00000000                                 
     3 00000000                                 ;os
     4 00000000                                 ;TAB=4
     5 00000000                                 ;BIOS-INFO,这部分内容放到内存0x0ff0处,作为操作系统的设置
     6 00000000                                 
     7 00000000                                 ;根据函数入口地址调节32位模式,这TM都没讲保护模式的进入，我都没法用gcc连接目标文件
     8 00000000                                 
     9  = 00280000                              BOTPAK	EQU		0x00280000		;加载bootpack
    10  = 00100000                              DSKCAC	EQU		0x00100000		;磁盘缓存的位置
    11  = 00008000                              DSKCAC0	EQU		0x00008000		;磁盘缓存的位置（实模式）
    12 00000000                                 
    13 00000000                                 ;BOOT_INFO相关
    14  = 00000FF0                              CYLS	EQU		0x0ff0			;引导扇区设置
    15  = 00000FF1                              LEDS	EQU		0x0ff1
    16  = 00000FF2                              VMODE	EQU		0x0ff2			;关于颜色的信息
    17  = 00000FF4                              SCRNX	EQU		0x0ff4			;分辨率X
    18  = 00000FF6                              SCRNY	EQU		0x0ff6			;分辨率Y
    19  = 00000FF8                              VRAM	EQU		0x0ff8			;图像缓冲区的起始地址
    20 00000000                                 
    21                                          		ORG		0xc200			; 这个的程序要被装载的内存地址
    22 0000C200                                 
    23 0000C200                                 ;画面(屏幕设定)
    24 0000C200                                 		;确认VBE是否存在(VBE是VESA协会的BIOS标准)
    25 0000C200 B8 9000                         		MOV		AX,0x9000
    26 0000C203 8E C0                           		MOV		ES,AX			
    27 0000C205 BF 0000                         		MOV		DI,0			;显卡能利用的VBE信息需要写入到内存中以ES:DI开始的512字节中,0x9000指明了写入地址
    28 0000C208 B8 4F00                         		MOV		AX,0x4f00
    29 0000C20B CD 10                           		INT		0x10			;执行INT 0x10后,若存在VCE则AX会变成0x004f
    30 0000C20D 3D 004F                         		CMP		AX,0x004f
    31 0000C210 75 4B                           		JNE		scrn320
    32 0000C212                                 		;检查VBE版本
    33 0000C212 26 8B 45 04                     		MOV		AX,[ES:DI+4]
    34 0000C216 3D 0200                         		CMP		AX,0x0200
    35 0000C219 72 42                           		JB		scrn320							;if(AX<0x0200) got o scrn320
    36 0000C21B                                 		;取得画面信息
    37 0000C21B B9 0000                         		MOV		CX,VBEMODE						;读取画面模式信息
      >> [ERROR #012] expression error.
    38 0000C21E B8 4F01                         		MOV		AX,0x4f01
    39 0000C221 CD 10                           		INT  	0x10
    40 0000C223 3D 004F                         		CMP		AX,0x004f						;再次确认了AX的值
    41 0000C226 75 35                           		JNE		scrn320
    42 0000C228                                 		;画面模式信息确认
    43 0000C228 26 80 7D 19 08                  		CMP		BYTE [ES:DI+0x19],8				;该地址存储颜色数(我们设定了为8)
    44 0000C22D 75 2E                           		JNE		scrn320
    45 0000C22F 26 80 7D 1B 04                  		CMP		BYTE [ES:DI+0x1b],4				;该地址存储Y分辨率,确认Y分辨率
    46 0000C234 75 27                           		JNE		scrn320
    47 0000C236 26 8B 05                        		MOV		AX,[ES:DI+0x00]					;模式属性修改
    48 0000C239 25 0080                         		AND		AX,0x0080
    49 0000C23C 74 1F                           		JZ		scrn320		
    50 0000C23E                                 		
    51 0000C23E                                 		;画面模式切换
    52 0000C23E BB 4000                         		MOV		BX,VBEMODE+0x4000				;VBE的640x480x8bi色彩
      >> [ERROR #012] expression error.
    53 0000C241 B8 4F02                         		MOV		AX,0x4f02						;切换高分辨模式
    54 0000C244 CD 10                           		INT		0x10
    55 0000C246 C6 06 0FF2 08                   		MOV		BYTE [VMODE],8					;屏幕的模式,8bit（参考C语言的引用）
    56 0000C24B 26 8B 45 12                     		MOV		AX,[ES:DI+0x12]					;X的分辨率写入scrnX
    57 0000C24F A3 0FF4                         		MOV		[SCRNX],AX
    58 0000C252 26 8B 45 14                     		MOV		AX,[ES:DI+0x14]					;y的分辨率写入scrnY
    59 0000C256 A3 0FF6                         		MOV		[SCRNY],AX
    60 0000C259 26                              		MOV		EAX,[ES:DI+0x28]				;VRAM的地址
      >> [ERROR #004] data type error.
    61 0000C25A                                 		MOV		[VRAM],EAX
      >> [ERROR #003] data size error.
    62 0000C25A E9 3DA3                         		JMP		keystatus						;跳过sran320部分
      >> [ERROR #012] expression error.
    63 0000C25D                                 
    64 0000C25D                                 scrn320:										;显卡不支持VBE,改为使用320*320模式
    65 0000C25D B0 13                           		MOV		AL,0x13							;VGA图,320x200x8bit彩色
    66 0000C25F B4 00                           		MOV		AH,0x00
    67 0000C261 CD 10                           		INT		0x10
    68 0000C263 C6 06 0FF2 08                   		MOV		BYTE [VMODE],8
    69 0000C268 C7 06 0FF4 0140                 		MOV		WORD [SCRNX],320
    70 0000C26E C7 06 0FF6 00C8                 		MOV		WORD [SCRNY],200
    71 0000C274 66 C7 06 0FF8 000A0000          		MOV		DWORD [VRAM],0x000a0000
    72 0000C27D                                 
    73 0000C27D                                 ;通过BIOS获取指示灯状态
    74 0000C27D                                 
    75 0000C27D B4 02                           		MOV		AH,0x02
    76 0000C27F CD 16                           		INT		0x16 			;keyboard BIOS
    77 0000C281 A2 0FF1                         		MOV		[LEDS],AL
    78 0000C284                                 
    79 0000C284                                 ;防止PIC接受所有中断(执行报护模式转换时屏蔽所有中断)
    80 0000C284                                 ;	AT兼容机的规范、PIC初始化
    81 0000C284                                 ;	然后之前在CLI不做任何事就挂起
    82 0000C284                                 ;	PIC在同意后初始化
    83 0000C284                                 
    84 0000C284 B0 FF                           		MOV		AL,0xff
    85 0000C286 E6 21                           		OUT		0x21,AL			;禁止从主PIC的全部中断
    86 0000C288 90                              		NOP						;不断执行OUT指令
    87 0000C289 E6 A1                           		OUT		0xa1,AL			;禁止从从PIC的全部中断
    88 0000C28B                                 
    89 0000C28B FA                              		CLI						;进一步中断CPU
    90 0000C28C                                 
    91 0000C28C                                 ;让CPU支持1M以上内存、设置A20GATE
    92 0000C28C                                 ;CPU在16位模式下最大内存只有1MB
    93 0000C28C                                 ;以下使内存可用
    94 0000C28C E8 00B5                         		CALL	waitkbdout
    95 0000C28F B0 D1                           		MOV		AL,0xd1
    96 0000C291 E6 64                           		OUT		0x64,AL
    97 0000C293 E8 00AE                         		CALL	waitkbdout
    98 0000C296 B0 DF                           		MOV		AL,0xdf			;enable A20
    99 0000C298 E6 60                           		OUT		0x60,AL
   100 0000C29A E8 00A7                         		CALL	waitkbdout
   101 0000C29D                                 
   102 0000C29D                                 ;保护模式转换(就是这里!!被坑了)
   103 0000C29D                                 
   104 0000C29D                                 [INSTRSET "i486p"]				;说明使用486指令(可以使用LGDT,EAX,CR0等32位有关指令)
   105 0000C29D                                 
   106 0000C29D 0F 01 16 C38A                   		LGDT	[GDTR0]			;设置临时GDT
   107 0000C2A2 0F 20 C0                        		MOV		EAX,CR0
   108 0000C2A5 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	;使用bit31（禁用分页）
   109 0000C2AB 66 83 C8 01                     		OR		EAX,0x00000001	;bit0到1转换（保护模式过渡）
   110 0000C2AF 0F 22 C0                        		MOV		CR0,EAX			;通过CR0切换到保护模式
   111 0000C2B2 EB 00                           		JMP		pipelineflush
   112 0000C2B4                                 pipelineflush:
   113 0000C2B4 B8 0008                         		MOV		AX,1*8			; 写32bit的段
   114 0000C2B7 8E D8                           		MOV		DS,AX
   115 0000C2B9 8E C0                           		MOV		ES,AX
   116 0000C2BB 8E E0                           		MOV		FS,AX
   117 0000C2BD 8E E8                           		MOV		GS,AX
   118 0000C2BF 8E D0                           		MOV		SS,AX
   119 0000C2C1                                 
   120 0000C2C1                                 ;bootpack传递
   121 0000C2C1                                 
   122 0000C2C1 66 BE 0000C390                  		MOV		ESI,bootpack	;源
   123 0000C2C7 66 BF 00280000                  		MOV		EDI,BOTPAK		;目标
   124 0000C2CD 66 B9 00020000                  		MOV		ECX,512*1024/4
   125 0000C2D3 E8 0075                         		CALL	memcpy
   126 0000C2D6                                 
   127 0000C2D6                                 ;传输磁盘数据
   128 0000C2D6                                 
   129 0000C2D6                                 ;从引导区开始
   130 0000C2D6                                 
   131 0000C2D6 66 BE 00007C00                  		MOV		ESI,0x7c00		;源
   132 0000C2DC 66 BF 00100000                  		MOV		EDI,DSKCAC		;目标
   133 0000C2E2 66 B9 00000080                  		MOV		ECX,512/4
   134 0000C2E8 E8 0060                         		CALL	memcpy
   135 0000C2EB                                 
   136 0000C2EB                                 ;剩余的全部
   137 0000C2EB                                 
   138 0000C2EB 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	;源
   139 0000C2F1 66 BF 00100200                  		MOV		EDI,DSKCAC+512	;目标
   140 0000C2F7 66 B9 00000000                  		MOV		ECX,0
   141 0000C2FD 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
   142 0000C301 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	;除以4得到字节数
   143 0000C308 66 81 E9 00000080               		SUB		ECX,512/4		;IPL偏移量
   144 0000C30F E8 0039                         		CALL	memcpy
   145 0000C312                                 
   146 0000C312                                 ;由于还需要asmhead才能完成
   147 0000C312                                 ;完成其余的bootpack任务
   148 0000C312                                 
   149 0000C312                                 ;bootpack启动
   150 0000C312                                 
   151 0000C312 66 BB 00280000                  		MOV		EBX,BOTPAK
   152 0000C318 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
   153 0000C31D 66 83 C1 03                     		ADD		ECX,3			;ECX += 3;
   154 0000C321 66 C1 E9 02                     		SHR		ECX,2			;ECX /= 4;
   155 0000C325 74 10                           		JZ		skip			;传输完成
   156 0000C327 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	;源
   157 0000C32C 66 01 DE                        		ADD		ESI,EBX
   158 0000C32F 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	;目标
   159 0000C334 E8 0014                         		CALL	memcpy
   160 0000C337                                 skip:
   161 0000C337 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	;堆栈的初始化
   162 0000C33C 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b
   163 0000C344                                 
   164 0000C344                                 waitkbdout:
   165 0000C344 E4 64                           		IN		 AL,0x64
   166 0000C346 24 02                           		AND		 AL,0x02
   167 0000C348 75 FA                           		JNZ		waitkbdout		;AND结果不为0跳转到waitkbdout
   168 0000C34A C3                              		RET
   169 0000C34B                                 
   170 0000C34B                                 memcpy:
   171 0000C34B 67 66 8B 06                     		MOV		EAX,[ESI]
   172 0000C34F 66 83 C6 04                     		ADD		ESI,4
   173 0000C353 67 66 89 07                     		MOV		[EDI],EAX
   174 0000C357 66 83 C7 04                     		ADD		EDI,4
   175 0000C35B 66 83 E9 01                     		SUB		ECX,1
   176 0000C35F 75 EA                           		JNZ		memcpy			;运算结果不为0跳转到memcpy
   177 0000C361 C3                              		RET
   178 0000C362                                 ;memcpy地址前缀大小
   179 0000C362                                 
   180 0000C362 00 00 00 00 00 00 00 00 00 00   		ALIGNB	16
       0000C36C 00 00 00 00 
   181 0000C370                                 GDT0:
   182 0000C370 00 00 00 00 00 00 00 00         		RESB	8				;初始值
   183 0000C378 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	;写32bit位段寄存器
   184 0000C380 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	;可执行的文件的32bit寄存器（bootpack用）
   185 0000C388                                 
   186 0000C388 0000                            		DW		0
   187 0000C38A                                 GDTR0:
   188 0000C38A 0017                            		DW		8*3-1
   189 0000C38C 0000C370                        		DD		GDT0
   190 0000C390                                 
   191 0000C390                                 		ALIGNB	16
   192 0000C390                                 bootpack:
