     1 00000000                                 [FORMAT "WCOFF"]
     2 00000000                                 [INSTRSET "i486p"]
     3 00000000                                 [OPTIMIZE 1]
     4 00000000                                 [OPTION 1]
     5 00000000                                 [BITS 32]
     6 00000000                                 	EXTERN	_wait_KBC_sendready
     7 00000000                                 	EXTERN	_io_out8
     8 00000000                                 	EXTERN	_io_in8
     9 00000000                                 	EXTERN	_fifo32_put
    10 00000000                                 [FILE "mouse.c"]
    11                                          [SECTION .text]
    12 00000000                                 	GLOBAL	_enable_mouse
    13 00000000                                 _enable_mouse:
    14 00000000 55                              	PUSH	EBP
    15 00000001 89 E5                           	MOV	EBP,ESP
    16 00000003 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
    17 00000006 A3 [00000000]                   	MOV	DWORD [_mousefifo],EAX
    18 0000000B 8B 45 0C                        	MOV	EAX,DWORD [12+EBP]
    19 0000000E A3 [00000004]                   	MOV	DWORD [_mousedata0],EAX
    20 00000013 E8 [00000000]                   	CALL	_wait_KBC_sendready
    21 00000018 68 000000D4                     	PUSH	212
    22 0000001D 6A 64                           	PUSH	100
    23 0000001F E8 [00000000]                   	CALL	_io_out8
    24 00000024 E8 [00000000]                   	CALL	_wait_KBC_sendready
    25 00000029 68 000000F4                     	PUSH	244
    26 0000002E 6A 60                           	PUSH	96
    27 00000030 E8 [00000000]                   	CALL	_io_out8
    28 00000035 8B 45 10                        	MOV	EAX,DWORD [16+EBP]
    29 00000038 C6 40 03 00                     	MOV	BYTE [3+EAX],0
    30 0000003C C9                              	LEAVE
    31 0000003D C3                              	RET
    32 0000003E                                 	GLOBAL	_mouse_decode
    33 0000003E                                 _mouse_decode:
    34 0000003E 55                              	PUSH	EBP
    35 0000003F 89 E5                           	MOV	EBP,ESP
    36 00000041 56                              	PUSH	ESI
    37 00000042 53                              	PUSH	EBX
    38 00000043 8B 55 08                        	MOV	EDX,DWORD [8+EBP]
    39 00000046 8B 4D 0C                        	MOV	ECX,DWORD [12+EBP]
    40 00000049 89 CE                           	MOV	ESI,ECX
    41 0000004B 8A 42 03                        	MOV	AL,BYTE [3+EDX]
    42 0000004E 84 C0                           	TEST	AL,AL
    43 00000050 75 11                           	JNE	L3
    44 00000052 80 F9 FA                        	CMP	CL,-6
    45 00000055 74 06                           	JE	L12
    46 00000057                                 L11:
    47 00000057 31 C0                           	XOR	EAX,EAX
    48 00000059                                 L2:
    49 00000059 5B                              	POP	EBX
    50 0000005A 5E                              	POP	ESI
    51 0000005B 5D                              	POP	EBP
    52 0000005C C3                              	RET
    53 0000005D                                 L12:
    54 0000005D C6 42 03 01                     	MOV	BYTE [3+EDX],1
    55 00000061 EB F4                           	JMP	L11
    56 00000063                                 L3:
    57 00000063 3C 01                           	CMP	AL,1
    58 00000065 74 61                           	JE	L13
    59 00000067 3C 02                           	CMP	AL,2
    60 00000069 74 54                           	JE	L14
    61 0000006B 3C 03                           	CMP	AL,3
    62 0000006D 74 05                           	JE	L15
    63 0000006F 83 C8 FF                        	OR	EAX,-1
    64 00000072 EB E5                           	JMP	L2
    65 00000074                                 L15:
    66 00000074 8A 1A                           	MOV	BL,BYTE [EDX]
    67 00000076 81 E6 000000FF                  	AND	ESI,255
    68 0000007C 89 D8                           	MOV	EAX,EBX
    69 0000007E 88 4A 02                        	MOV	BYTE [2+EDX],CL
    70 00000081 83 E0 07                        	AND	EAX,7
    71 00000084 89 72 08                        	MOV	DWORD [8+EDX],ESI
    72 00000087 89 42 0C                        	MOV	DWORD [12+EDX],EAX
    73 0000008A 88 D8                           	MOV	AL,BL
    74 0000008C 0F B6 4A 01                     	MOVZX	ECX,BYTE [1+EDX]
    75 00000090 83 E0 10                        	AND	EAX,16
    76 00000093 89 4A 04                        	MOV	DWORD [4+EDX],ECX
    77 00000096 C6 42 03 01                     	MOV	BYTE [3+EDX],1
    78 0000009A 84 C0                           	TEST	AL,AL
    79 0000009C 74 09                           	JE	L9
    80 0000009E 81 C9 FFFFFF00                  	OR	ECX,-256
    81 000000A4 89 4A 04                        	MOV	DWORD [4+EDX],ECX
    82 000000A7                                 L9:
    83 000000A7 83 E3 20                        	AND	EBX,32
    84 000000AA 84 DB                           	TEST	BL,BL
    85 000000AC 74 07                           	JE	L10
    86 000000AE 81 4A 08 FFFFFF00               	OR	DWORD [8+EDX],-256
    87 000000B5                                 L10:
    88 000000B5 F7 5A 08                        	NEG	DWORD [8+EDX]
    89 000000B8 B8 00000001                     	MOV	EAX,1
    90 000000BD EB 9A                           	JMP	L2
    91 000000BF                                 L14:
    92 000000BF 88 4A 01                        	MOV	BYTE [1+EDX],CL
    93 000000C2 C6 42 03 03                     	MOV	BYTE [3+EDX],3
    94 000000C6 EB 8F                           	JMP	L11
    95 000000C8                                 L13:
    96 000000C8 83 E6 C8                        	AND	ESI,-56
    97 000000CB 89 F0                           	MOV	EAX,ESI
    98 000000CD 3C 08                           	CMP	AL,8
    99 000000CF 75 86                           	JNE	L11
   100 000000D1 88 0A                           	MOV	BYTE [EDX],CL
   101 000000D3 C6 42 03 02                     	MOV	BYTE [3+EDX],2
   102 000000D7 E9 FFFFFF7B                     	JMP	L11
   103 000000DC                                 	GLOBAL	_inthandler2c
   104 000000DC                                 _inthandler2c:
   105 000000DC 55                              	PUSH	EBP
   106 000000DD 89 E5                           	MOV	EBP,ESP
   107 000000DF 6A 64                           	PUSH	100
   108 000000E1 68 000000A0                     	PUSH	160
   109 000000E6 E8 [00000000]                   	CALL	_io_out8
   110 000000EB 6A 62                           	PUSH	98
   111 000000ED 6A 20                           	PUSH	32
   112 000000EF E8 [00000000]                   	CALL	_io_out8
   113 000000F4 6A 60                           	PUSH	96
   114 000000F6 E8 [00000000]                   	CALL	_io_in8
   115 000000FB 02 05 [00000004]                	ADD	AL,BYTE [_mousedata0]
   116 00000101 0F B6 C0                        	MOVZX	EAX,AL
   117 00000104 50                              	PUSH	EAX
   118 00000105 FF 35 [00000000]                	PUSH	DWORD [_mousefifo]
   119 0000010B E8 [00000000]                   	CALL	_fifo32_put
   120 00000110 C9                              	LEAVE
   121 00000111 C3                              	RET
   122 00000112                                 	GLOBAL	_mousefifo
   123                                          [SECTION .data]
   124 00000000                                 	ALIGNB	4
   125 00000000                                 _mousefifo:
   126 00000000 00 00 00 00                     	RESB	4
   127 00000004                                 	GLOBAL	_mousedata0
   128                                          [SECTION .data]
   129 00000004                                 	ALIGNB	4
   130 00000004                                 _mousedata0:
   131 00000004 00 00 00 00                     	RESB	4
