     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式	
     5 00000000                                 [INSTRSET "i486p"]				; 使用到486为止的指令
     6 00000000                                 [BITS 32]						; 3制作32位模式用的机器语言
     7 00000000                                 
     8 00000000                                 [FILE "naskfunc.nas"]			; 文件名
     9 00000000                                 
    10 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    11 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    12 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    13 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    14 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    15 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    16 00000000                                 		GLOBAL	_load_tr
    17 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    18 00000000                                 		GLOBAL	_asm_inthandler27, _asm_inthandler2c
    19 00000000                                 		GLOBAL	_asm_cons_putchar
    20 00000000                                 		GLOBAL	_memtest_sub
    21 00000000                                 		GLOBAL	_farjmp
    22 00000000                                 		EXTERN	_inthandler20, _inthandler21
    23 00000000                                 		EXTERN	_inthandler27, _inthandler2c
    24 00000000                                 		EXTERN 	_cons_putchar
    25 00000000                                 
    26                                          [SECTION .text]
    27 00000000                                 
    28 00000000                                 _io_hlt:	; void io_hlt(void);
    29 00000000 F4                              		HLT
    30 00000001 C3                              		RET
    31 00000002                                 
    32 00000002                                 _io_cli:	; void io_cli(void);
    33 00000002 FA                              		CLI
    34 00000003 C3                              		RET
    35 00000004                                 
    36 00000004                                 _io_sti:	; void io_sti(void);
    37 00000004 FB                              		STI
    38 00000005 C3                              		RET
    39 00000006                                 
    40 00000006                                 _io_stihlt:	; void io_stihlt(void);
    41 00000006 FB                              		STI
    42 00000007 F4                              		HLT
    43 00000008 C3                              		RET
    44 00000009                                 
    45 00000009                                 _io_in8:	; int io_in8(int port);
    46 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    47 0000000D B8 00000000                     		MOV		EAX,0
    48 00000012 EC                              		IN		AL,DX
    49 00000013 C3                              		RET
    50 00000014                                 
    51 00000014                                 _io_in16:	; int io_in16(int port);
    52 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    53 00000018 B8 00000000                     		MOV		EAX,0
    54 0000001D 66 ED                           		IN		AX,DX
    55 0000001F C3                              		RET
    56 00000020                                 
    57 00000020                                 _io_in32:	; int io_in32(int port);
    58 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    59 00000024 ED                              		IN		EAX,DX
    60 00000025 C3                              		RET
    61 00000026                                 
    62 00000026                                 _io_out8:	; void io_out8(int port, int data);
    63 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    64 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    65 0000002E EE                              		OUT		DX,AL
    66 0000002F C3                              		RET
    67 00000030                                 
    68 00000030                                 _io_out16:	; void io_out16(int port, int data);
    69 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    70 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    71 00000038 66 EF                           		OUT		DX,AX
    72 0000003A C3                              		RET
    73 0000003B                                 
    74 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    75 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    76 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    77 00000043 EF                              		OUT		DX,EAX
    78 00000044 C3                              		RET
    79 00000045                                 
    80 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    81 00000045 9C                              		PUSHFD		; PUSH EFLAGS 
    82 00000046 58                              		POP		EAX
    83 00000047 C3                              		RET
    84 00000048                                 
    85 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    86 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    87 0000004C 50                              		PUSH	EAX
    88 0000004D 9D                              		POPFD		; POP EFLAGS 
    89 0000004E C3                              		RET
    90 0000004F                                 
    91 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    92 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    93 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    94 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    95 0000005E C3                              		RET
    96 0000005F                                 
    97 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    98 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    99 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   100 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   101 0000006E C3                              		RET
   102 0000006F                                 
   103 0000006F                                 _load_cr0:		; int load_cr0(void);
   104 0000006F 0F 20 C0                        		MOV		EAX,CR0
   105 00000072 C3                              		RET
   106 00000073                                 
   107 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   108 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   109 00000077 0F 22 C0                        		MOV		CR0,EAX
   110 0000007A C3                              		RET
   111 0000007B                                 
   112 0000007B                                 _load_tr:		; void load_tr(int tr);
   113 0000007B 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   114 00000080 C3                              		RET
   115 00000081                                 
   116 00000081                                 _asm_inthandler20:
   117 00000081 06                              		PUSH	ES
   118 00000082 1E                              		PUSH	DS
   119 00000083 60                              		PUSHAD
   120 00000084 89 E0                           		MOV		EAX,ESP
   121 00000086 50                              		PUSH	EAX
   122 00000087 66 8C D0                        		MOV		AX,SS
   123 0000008A 8E D8                           		MOV		DS,AX
   124 0000008C 8E C0                           		MOV		ES,AX
   125 0000008E E8 [00000000]                   		CALL	_inthandler20
   126 00000093 58                              		POP		EAX
   127 00000094 61                              		POPAD
   128 00000095 1F                              		POP		DS
   129 00000096 07                              		POP		ES
   130 00000097 CF                              		IRETD
   131 00000098                                 
   132 00000098                                 _asm_inthandler21:
   133 00000098 06                              		PUSH	ES
   134 00000099 1E                              		PUSH	DS
   135 0000009A 60                              		PUSHAD
   136 0000009B 89 E0                           		MOV		EAX,ESP
   137 0000009D 50                              		PUSH	EAX
   138 0000009E 66 8C D0                        		MOV		AX,SS
   139 000000A1 8E D8                           		MOV		DS,AX
   140 000000A3 8E C0                           		MOV		ES,AX
   141 000000A5 E8 [00000000]                   		CALL	_inthandler21
   142 000000AA 58                              		POP		EAX
   143 000000AB 61                              		POPAD
   144 000000AC 1F                              		POP		DS
   145 000000AD 07                              		POP		ES
   146 000000AE CF                              		IRETD
   147 000000AF                                 
   148 000000AF                                 _asm_inthandler27:
   149 000000AF 06                              		PUSH	ES
   150 000000B0 1E                              		PUSH	DS
   151 000000B1 60                              		PUSHAD
   152 000000B2 89 E0                           		MOV		EAX,ESP
   153 000000B4 50                              		PUSH	EAX
   154 000000B5 66 8C D0                        		MOV		AX,SS
   155 000000B8 8E D8                           		MOV		DS,AX
   156 000000BA 8E C0                           		MOV		ES,AX
   157 000000BC E8 [00000000]                   		CALL	_inthandler27
   158 000000C1 58                              		POP		EAX
   159 000000C2 61                              		POPAD
   160 000000C3 1F                              		POP		DS
   161 000000C4 07                              		POP		ES
   162 000000C5 CF                              		IRETD
   163 000000C6                                 
   164 000000C6                                 _asm_inthandler2c:
   165 000000C6 06                              		PUSH	ES
   166 000000C7 1E                              		PUSH	DS
   167 000000C8 60                              		PUSHAD
   168 000000C9 89 E0                           		MOV		EAX,ESP
   169 000000CB 50                              		PUSH	EAX
   170 000000CC 66 8C D0                        		MOV		AX,SS
   171 000000CF 8E D8                           		MOV		DS,AX
   172 000000D1 8E C0                           		MOV		ES,AX
   173 000000D3 E8 [00000000]                   		CALL	_inthandler2c
   174 000000D8 58                              		POP		EAX
   175 000000D9 61                              		POPAD
   176 000000DA 1F                              		POP		DS
   177 000000DB 07                              		POP		ES
   178 000000DC CF                              		IRETD
   179 000000DD                                 
   180 000000DD                                 _asm_cons_putchar:
   181 000000DD 6A 01                           		PUSH	1
   182 000000DF 25 000000FF                     		AND 	EAX,0xff				;将AH和EAX的高位置置0,将EAX置为已存入字符编码的状态
   183 000000E4 50                              		PUSH	EAX
   184 000000E5 FF 35 00000FEC                  		PUSH 	DWORD [0x0fec]			;读取内存并push该值
   185 000000EB E8 [00000000]                   		CALL	_cons_putchar
   186 000000F0 83 C4 0C                        		ADD 	ESP,12					;将栈中的数据丢失
   187 000000F3 CB                              		RETF							;far-RET返回
   188 000000F4                                 
   189 000000F4                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   190 000000F4 57                              		PUSH	EDI						; （由于还要使用EBX, ESI, EDI）
   191 000000F5 56                              		PUSH	ESI
   192 000000F6 53                              		PUSH	EBX
   193 000000F7 BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   194 000000FC BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   195 00000101 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   196 00000105                                 mts_loop:
   197 00000105 89 C3                           		MOV		EBX,EAX
   198 00000107 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   199 0000010D 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   200 0000010F 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   201 00000111 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   202 00000114 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   203 00000116 75 18                           		JNE		mts_fin
   204 00000118 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   205 0000011B 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   206 0000011D 75 11                           		JNE		mts_fin
   207 0000011F 89 13                           		MOV		[EBX],EDX				; *p = old;
   208 00000121 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   209 00000126 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   210 0000012A 76 D9                           		JBE		mts_loop
   211 0000012C 5B                              		POP		EBX
   212 0000012D 5E                              		POP		ESI
   213 0000012E 5F                              		POP		EDI
   214 0000012F C3                              		RET
   215 00000130                                 mts_fin:
   216 00000130 89 13                           		MOV		[EBX],EDX				; *p = old;
   217 00000132 5B                              		POP		EBX
   218 00000133 5E                              		POP		ESI
   219 00000134 5F                              		POP		EDI
   220 00000135 C3                              		RET
   221 00000136                                 
   222 00000136                                 _farjmp:								; void farjmp(int eip, int cs);
   223 00000136 FF 6C 24 04                     		JMP    FAR [ESP+4]    			; eip, cs
   224 0000013A C3                              		RET
   225 0000013B                                 
