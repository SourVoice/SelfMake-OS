     1 00000000                                 ;汇编语言实现与底层硬件的交互逻辑,用C调用底层硬件接口实现上层逻辑
     2 00000000                                 ;nask_func
     3 00000000                                 ;TAB = 4
     4 00000000                                 
     5 00000000                                 ;提供该接口文件信息
     6 00000000                                 [FORMAT "WCOFF"]                        ;制作目标文件的格式
     7 00000000                                 [bits 32]                               ;制作32位模式的机器语言
     8 00000000                                 [instrset "i486p"]                      ; for 486(using nask)
     9 00000000                                 [FILE "naskfunc.nas"]                   ;源文件名
    10 00000000                                 
    11 00000000                                 GLOBAL          _io_hlt                     ;程序中包含的函数名       
    12 00000000                                 GLOBAL          _io_cli,_io_sti,_io_stihlt
    13 00000000                                 GLOBAL          _io_in8,_io_in16,_io_in32
    14 00000000                                 GLOBAL          _io_out8,_io_out16,_io_out32
    15 00000000                                 GLOBAL          _io_load_eflags,_io_store_eflags         
    16 00000000                                 GLOBAL          _boxfill8
    17                                          [SECTION .text]
    18 00000000                                 _io_hlt:                                ;void io_hlt(void),函数声明+定义
    19 00000000 F4                                      hlt
    20 00000001 C3                                      RET                             ;函数结束标志
    21 00000002                                 _io_cli:                                ;中断标志置为0
    22 00000002 FA                                      cli
    23 00000003 C3                                      RET
    24 00000004                                 _io_sti:                                ;中断标志置为1
    25 00000004 FB                                      sti
    26 00000005 C3                                      RET
    27 00000006                                 _io_sti;
      >> [ERROR #007] label definition error.
    28 00000006 FB                                      sti
    29 00000007 C3                                      RET
    30 00000008                                 _io_stihlt:
    31 00000008 8B 54 24 04                             mov     edx,[esp+4]
    32 0000000C B8 00000000                             mov     eax,0
    33 00000011 EC                                      in      al,dx
    34 00000012 C3                                      RET
    35 00000013                                 _io_in8:
    36 00000013 8B 54 24 04                             mov     edx,[esp+4]
    37 00000017 B8 00000000                             mov     eax,0
    38 0000001C EC                                      in      al,dx
    39 0000001D                                 _io_in16:
    40 0000001D 8B 54 24 04                             mov     edx,[esp+4]
    41 00000021 B8 00000000                             mov     eax,0
    42 00000026 66 ED                                   in      ax,dx
    43 00000028 C3                                      RET
    44 00000029                                 _io_in32:
    45 00000029 8B 54 24 04                             mov     edx,[esp+4]
    46 0000002D B8 00000000                             mov     eax,0
    47 00000032                                 _io_out8:             
    48 00000032 8B 54 24 04                             mov     edx,[esp+4]
    49 00000036 8B 44 24 08                             mov     eax,[esp+8]
    50 0000003A 66 89 C2                                mov     dx,ax
    51 0000003D C3                                      RET    
    52 0000003E                                 _io_out16:
    53 0000003E 8B 54 24 04                             mov     edx,[esp+4]
    54 00000042 8B 44 24 08                             mov     eax,[esp+8]
    55 00000046 66 EF                                   out     dx,ax
    56 00000048 C3                                      RET
    57 00000049                                 _io_out32:
    58 00000049 8B 54 24 04                             mov     edx,[esp+4]
    59 0000004D 8B 44 24 08                             mov     eax,[esp+8]
    60 00000051 66 EF                                   out     dx,ax
    61 00000053 C3                                      RET
    62 00000054                                 _io_load_eflags:                ;读取IF标志位的值较麻烦,需要将eflags寄存器全部压入栈,再找到IF的值
    63 00000054 9C                                      pushfd                  ;将eflags全部压入栈
    64 00000055 58                                      pop     eax             ;返回值为eax
    65 00000056 C3                                      RET
    66 00000057                                 _io_store_eflags:
    67 00000057 8B 44 24 04                             mov     eax,[esp+4]     ;esp栈底指针
    68 0000005B 50                                      push    eax
    69 0000005C 9D                                      popfd
    70 0000005D C3                                      RET        
