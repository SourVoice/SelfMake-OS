[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_sprintf
	EXTERN	_io_hlt
	EXTERN	_font_A
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_out8
	EXTERN	_io_store_eflags
	EXTERN	_hankaku
[FILE "bootpack.c"]
[SECTION .data]
_font_A:
	DB	0
	DB	24
	DB	24
	DB	24
	DB	36
	DB	36
	DB	36
	DB	36
	DB	126
	DB	66
	DB	66
	DB	-25
	DB	0
	DB	0
	RESB	2
LC0:
	DB	"what?",0x00
LC1:
	DB	"scrnx = %d",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-60+EBP]
	SUB	ESP,304
	CALL	_init_palette
	MOV	EDI,DWORD [4088]
	MOVSX	EAX,WORD [4086]
	MOVSX	ESI,WORD [4084]
	PUSH	EAX
	PUSH	ESI
	PUSH	EDI
	CALL	_init_screen
	PUSH	LC0
	PUSH	20
	PUSH	20
	PUSH	9
	PUSH	ESI
	PUSH	EDI
	CALL	_putfonts8_asc
	ADD	ESP,36
	PUSH	LC0
	PUSH	40
	PUSH	40
	PUSH	9
	PUSH	ESI
	PUSH	EDI
	CALL	_putfonts8_asc
	PUSH	LC0
	PUSH	60
	PUSH	60
	PUSH	9
	PUSH	ESI
	PUSH	EDI
	CALL	_putfonts8_asc
	ADD	ESP,48
	PUSH	ESI
	PUSH	LC1
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	64
	LEA	EBX,DWORD [-316+EBP]
	PUSH	16
	PUSH	6
	PUSH	ESI
	PUSH	EDI
	CALL	_putfonts8_asc
	ADD	ESP,36
	PUSH	0
	PUSH	EBX
	CALL	_init_mouse_cursor8
	PUSH	16
	PUSH	EBX
	PUSH	100
	PUSH	160
	PUSH	16
	PUSH	16
	PUSH	ESI
	PUSH	EDI
	CALL	_putblock8_8
	ADD	ESP,40
L2:
	CALL	_io_hlt
	JMP	L2
	GLOBAL	_init_screen
_init_screen:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,29
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	DEC	EAX
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	ESI,DWORD [16+EBP]
	SUB	ESI,24
	PUSH	ESI
	PUSH	59
	PUSH	ESI
	PUSH	3
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EBX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EBX,4
	PUSH	EBX
	PUSH	2
	PUSH	ESI
	PUSH	2
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	PUSH	EBX
	PUSH	59
	PUSH	EBX
	PUSH	3
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,5
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	PUSH	59
	SUB	EAX,23
	PUSH	EAX
	MOV	DWORD [-16+EBP],EAX
	PUSH	59
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EDI,DWORD [16+EBP]
	SUB	EDI,3
	PUSH	EDI
	PUSH	59
	PUSH	EDI
	PUSH	2
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	EDI
	PUSH	60
	PUSH	ESI
	PUSH	60
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EBX,DWORD [12+EBP]
	MOV	EAX,DWORD [12+EBP]
	PUSH	ESI
	SUB	EAX,4
	SUB	EBX,47
	PUSH	EAX
	MOV	DWORD [-20+EBP],EAX
	PUSH	ESI
	PUSH	EBX
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	EDI
	PUSH	EBX
	PUSH	DWORD [-16+EBP]
	PUSH	EBX
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	PUSH	EDI
	PUSH	EBX
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [12+EBP]
	ADD	ESP,56
	SUB	EAX,3
	PUSH	EDI
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	PUSH	_font_A
	PUSH	2
	PUSH	2
	PUSH	6
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont8
	ADD	ESP,52
	PUSH	_font_A
	PUSH	12
	PUSH	12
	PUSH	6
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont8
	PUSH	_font_A
	PUSH	22
	PUSH	22
	PUSH	6
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont8
	ADD	ESP,48
	PUSH	_font_A
	PUSH	32
	PUSH	32
	PUSH	6
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
_table_rgb.0:
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-58
	DB	-58
	DB	-58
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
[SECTION .text]
	GLOBAL	_init_palette
_init_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	_table_rgb.0
	PUSH	15
	PUSH	0
	CALL	_set_palette
	LEAVE
	RET
	GLOBAL	_set_palette
_set_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	EDI,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	CALL	_io_load_eflags
	MOV	DWORD [-16+EBP],EAX
	CALL	_io_cli
	PUSH	EBX
	PUSH	968
	CALL	_io_out8
	CMP	EBX,EDI
	POP	EDX
	POP	ECX
	JLE	L12
L14:
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_io_store_eflags
L12:
	MOV	AL,BYTE [ESI]
	INC	EBX
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [1+ESI]
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [2+ESI]
	SHR	AL,2
	ADD	ESI,3
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,24
	CMP	EBX,EDI
	JLE	L12
	JMP	L14
	GLOBAL	_putfonts8_asc
_putfonts8_asc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ESI
	MOV	EBX,DWORD [28+EBP]
	MOV	AL,BYTE [16+EBP]
	MOV	BYTE [-13+EBP],AL
	MOV	ESI,DWORD [20+EBP]
	MOV	EDI,DWORD [24+EBP]
	CMP	BYTE [EBX],0
	JNE	L20
L22:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L20:
	MOVZX	EAX,BYTE [EBX]
	SAL	EAX,4
	INC	EBX
	ADD	EAX,_hankaku
	PUSH	EAX
	PUSH	EDI
	PUSH	ESI
	ADD	ESI,8
	MOVSX	EAX,BYTE [-13+EBP]
	PUSH	EAX
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont8
	ADD	ESP,24
	CMP	BYTE [EBX],0
	JNE	L20
	JMP	L22
	GLOBAL	_putfont8
_putfont8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	MOV	EDI,DWORD [28+EBP]
	MOV	BL,BYTE [16+EBP]
L36:
	MOV	EAX,DWORD [24+EBP]
	MOV	EDX,DWORD [20+EBP]
	ADD	EAX,ESI
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	ECX,DWORD [EDX+EAX*1]
	MOV	DL,BYTE [ESI+EDI*1]
	TEST	DL,DL
	JNS	L28
	MOV	BYTE [ECX],BL
L28:
	MOV	AL,DL
	AND	EAX,64
	TEST	AL,AL
	JE	L29
	MOV	BYTE [1+ECX],BL
L29:
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L30
	MOV	BYTE [2+ECX],BL
L30:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L31
	MOV	BYTE [3+ECX],BL
L31:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L32
	MOV	BYTE [4+ECX],BL
L32:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L33
	MOV	BYTE [5+ECX],BL
L33:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L34
	MOV	BYTE [6+ECX],BL
L34:
	AND	EDX,1
	TEST	DL,DL
	JE	L26
	MOV	BYTE [7+ECX],BL
L26:
	INC	ESI
	CMP	ESI,15
	JLE	L36
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_boxfill8
_boxfill8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	PUSH	EAX
	MOV	AL,BYTE [16+EBP]
	MOV	ECX,DWORD [24+EBP]
	MOV	EDI,DWORD [28+EBP]
	MOV	BYTE [-13+EBP],AL
	CMP	ECX,DWORD [32+EBP]
	JG	L51
	MOV	EBX,DWORD [12+EBP]
	IMUL	EBX,ECX
L49:
	MOV	EDX,DWORD [20+EBP]
	CMP	EDX,EDI
	JG	L53
	MOV	ESI,DWORD [8+EBP]
	ADD	ESI,EBX
	ADD	ESI,EDX
	MOV	DWORD [-20+EBP],ESI
L48:
	MOV	ESI,DWORD [-20+EBP]
	MOV	AL,BYTE [-13+EBP]
	INC	EDX
	MOV	BYTE [ESI],AL
	INC	ESI
	MOV	DWORD [-20+EBP],ESI
	CMP	EDX,EDI
	JLE	L48
L53:
	INC	ECX
	ADD	EBX,DWORD [12+EBP]
	CMP	ECX,DWORD [32+EBP]
	JLE	L49
L51:
	POP	EDI
	POP	EAX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
_cursor.1:
	DB	"**************.."
	DB	"*OOOOOOOOOOO*..."
	DB	"*OOOOOOOOOO*...."
	DB	"*OOOOOOOOO*....."
	DB	"*OOOOOOOO*......"
	DB	"*OOOOOOO*......."
	DB	"*OOOOOOO* ......"
	DB	"*OOOOOOOO*......"
	DB	"*OOOO**OOO*....."
	DB	"*OOO*..*OOO*...."
	DB	"*OO*....*OOO*..."
	DB	"*O*......*OOO*.."
	DB	"**........*OOO*."
	DB	"*..........*OOO*"
	DB	"............*OO*"
	DB	".............***"
[SECTION .text]
	GLOBAL	_init_mouse_cursor8
_init_mouse_cursor8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	XOR	EBX,EBX
	PUSH	EAX
	MOV	AL,BYTE [12+EBP]
	MOV	EDI,DWORD [8+EBP]
	MOV	BYTE [-13+EBP],AL
L67:
	XOR	ECX,ECX
L66:
	LEA	EDX,DWORD [ECX+EBX*1]
	CMP	BYTE [_cursor.1+EDX],42
	JE	L72
L63:
	CMP	BYTE [_cursor.1+EDX],79
	JE	L73
L64:
	CMP	BYTE [_cursor.1+EDX],46
	JE	L74
L61:
	INC	ECX
	CMP	ECX,15
	JLE	L66
	INC	ESI
	ADD	EBX,16
	CMP	ESI,15
	JLE	L67
	POP	EAX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L74:
	LEA	EAX,DWORD [EDI+EBX*1]
	MOV	DL,BYTE [-13+EBP]
	MOV	BYTE [ECX+EAX*1],DL
	JMP	L61
L73:
	LEA	EAX,DWORD [EDI+EBX*1]
	MOV	BYTE [ECX+EAX*1],6
	JMP	L64
L72:
	LEA	EAX,DWORD [EDI+EBX*1]
	MOV	BYTE [ECX+EAX*1],12
	JMP	L63
	GLOBAL	_putblock8_8
_putblock8_8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	PUSH	EBX
	CMP	EDI,DWORD [20+EBP]
	JGE	L87
	MOV	ESI,DWORD [32+EBP]
L85:
	XOR	EBX,EBX
	CMP	EBX,DWORD [16+EBP]
	JGE	L89
L84:
	MOV	EDX,DWORD [28+EBP]
	LEA	EAX,DWORD [EDX+EDI*1]
	MOV	EDX,DWORD [24+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	ECX,DWORD [EDX+EBX*1]
	MOV	DL,BYTE [EBX+ESI*1]
	INC	EBX
	MOV	BYTE [ECX+EAX*1],DL
	CMP	EBX,DWORD [16+EBP]
	JL	L84
L89:
	INC	EDI
	ADD	ESI,DWORD [36+EBP]
	CMP	EDI,DWORD [20+EBP]
	JL	L85
L87:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
