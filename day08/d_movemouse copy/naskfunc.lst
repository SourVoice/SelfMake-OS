     1 00000000                                 ;汇编语言实现与底层硬件的交互逻辑,用C调用底层硬件接口实现上层逻辑
     2 00000000                                 ;nask_func
     3 00000000                                 ;TAB = 4
     4 00000000                                 
     5 00000000                                 ;提供该接口文件信息
     6 00000000                                 [FORMAT "WCOFF"]                        ;制作目标文件的格式
     7 00000000                                 [bits 32]                               ;制作32位模式的机器语言
     8 00000000                                 [instrset "i486p"]                      ; for 486(using nask)
     9 00000000                                 [FILE "naskfunc.nas"]                   ;源文件名
    10 00000000                                 
    11 00000000                                 GLOBAL          _io_hlt                     ;程序中包含的函数名       
    12 00000000                                 GLOBAL          _io_cli,_io_sti,_io_stihlt
    13 00000000                                 GLOBAL          _io_in8,_io_in16,_io_in32
    14 00000000                                 GLOBAL          _io_out8,_io_out16,_io_out32
    15 00000000                                 GLOBAL          _io_load_eflags,_io_store_eflags         
    16 00000000                                 GLOBAL          _load_gdtr,_load_idtr
    17 00000000                                 GLOBAL          _asm_inthandler21,_asm_inthandler27,_asm_inthandler2c
    18 00000000                                 EXTERN          _inthandler21,_inthandler27,_inthandler2c       ;中断处理程序 ,extern表示函数声明在外部   
    19                                          [SECTION .text]
    20 00000000                                 _io_hlt:                                ;void io_hlt(void),函数声明+定义
    21 00000000 F4                                      hlt
    22 00000001 C3                                      RET                             
    23 00000002                                 _io_cli:                                ;中断标志置为0
    24 00000002 FA                                      cli
    25 00000003 C3                                      RET
    26 00000004                                 _io_sti:                                ;中断标志置为1
    27 00000004 FB                                      sti
    28 00000005 C3                                      RET     
    29 00000006                                 _io_stihlt:             ; void io_stihlt(void);
    30 00000006 FB                                      sti
    31 00000007 F4                                      hlt
    32 00000008 C3                                      ret
    33 00000009                                 _io_in8:
    34 00000009 8B 54 24 04                             mov     edx,[esp+4]
    35 0000000D B8 00000000                             mov     eax,0
    36 00000012 EC                                      in      al,dx
    37 00000013 C3                                      RET
    38 00000014                                 _io_in16:
    39 00000014 8B 54 24 04                             mov     edx,[esp+4]
    40 00000018 B8 00000000                             mov     eax,0
    41 0000001D 66 ED                                   in      ax,dx
    42 0000001F C3                                      RET
    43 00000020                                 _io_in32:
    44 00000020 8B 54 24 04                             mov     edx,[esp+4]
    45 00000024 ED                                      in      eax,dx
    46 00000025 C3                                      RET
    47 00000026                                 _io_out8:             
    48 00000026 8B 54 24 04                             mov     edx,[esp+4]
    49 0000002A 8A 44 24 08                             mov     al,[esp+8]
    50 0000002E EE                                      out     dx,al
    51 0000002F C3                                      RET    
    52 00000030                                 _io_out16:
    53 00000030 8B 54 24 04                             mov     edx,[esp+4]
    54 00000034 8B 44 24 08                             mov     eax,[esp+8]
    55 00000038 66 EF                                   out     dx,ax
    56 0000003A C3                                      RET
    57 0000003B                                 _io_out32:
    58 0000003B 8B 54 24 04                             mov     edx,[esp+4]
    59 0000003F 8B 44 24 08                             mov     eax,[esp+8]
    60 00000043 EF                                      out     dx,EAX
    61 00000044 C3                                      RET
    62 00000045                                 _io_load_eflags:                
    63 00000045 9C                                      pushfd                  
    64 00000046 58                                      pop     eax             
    65 00000047 C3                                      RET
    66 00000048                                 _io_store_eflags:
    67 00000048 8B 44 24 04                             mov     eax,[esp+4]     ;esp栈底指针
    68 0000004C 50                                      push    eax
    69 0000004D 9D                                      popfd
    70 0000004E C3                                      RET        
    71 0000004F                                 _load_gdtr:
    72 0000004F 66 8B 44 24 04                          mov     ax,[esp+4]
    73 00000054 66 89 44 24 06                          mov     [esp+6],ax
    74 00000059 0F 01 54 24 06                          LGDT    [esp+6]
    75 0000005E C3                                      RET
    76 0000005F                                 _load_idtr:
    77 0000005F 66 8B 44 24 04                          mov     ax,[esp+4]
    78 00000064 66 89 44 24 06                          mov     [esp+6],ax
    79 00000069 0F 01 5C 24 06                          LIDT    [esp+6]
    80 0000006E C3                                      RET
    81 0000006F                                 ;中断信号处理器(PIC)
    82 0000006F                                 _asm_inthandler21:                      ;使用栈结构将寄存器返回中断前状态
    83 0000006F 06                                      push    ES
    84 00000070 1E                                      push    DS
    85 00000071 60                                      PUSHAD
    86 00000072 89 E0                                   mov     EAX,ESP
    87 00000074 50                                      push    EAX
    88 00000075 66 8C D0                                mov     ax,SS
    89 00000078 8E D8                                   mov     ds,ax
    90 0000007A 8E C0                                   mov     es,ax
    91 0000007C E8 [00000000]                           call    _inthandler21
    92 00000081 58                                      pop     eax
    93 00000082 61                                      POPAD
    94 00000083 1F                                      pop     ds
    95 00000084 07                                      pop     es
    96 00000085 CF                                      IRETD                           ;中断程序中只能使用IRETD返回
    97 00000086                                 _asm_inthandler27:                      
    98 00000086 06                                      push    ES
    99 00000087 1E                                      push    DS
   100 00000088 60                                      PUSHAD
   101 00000089 89 E0                                   mov     EAX,esp
   102 0000008B 50                                      push    EAX
   103 0000008C 66 8C D0                                mov     ax,SS
   104 0000008F 8E D8                                   mov     ds,ax
   105 00000091 8E C0                                   mov     es,ax
   106 00000093 E8 [00000000]                           call    _inthandler27
   107 00000098 58                                      pop     eax
   108 00000099 61                                      POPAD
   109 0000009A 1F                                      pop     ds
   110 0000009B 07                                      pop     es
   111 0000009C CF                                      IRETD                           
   112 0000009D                                  
   113 0000009D                                  _asm_inthandler2c:                      
   114 0000009D 06                                      push    ES
   115 0000009E 1E                                      push    DS
   116 0000009F 60                                      PUSHAD
   117 000000A0 89 E0                                   mov     EAX,esp
   118 000000A2 50                                      push    EAX
   119 000000A3 66 8C D0                                mov     ax,SS
   120 000000A6 8E D8                                   mov     ds,ax
   121 000000A8 8E C0                                   mov     es,ax
   122 000000AA E8 [00000000]                           call    _inthandler2c
   123 000000AF 58                                      pop     eax
   124 000000B0 61                                      POPAD
   125 000000B1 1F                                      pop     ds
   126 000000B2 07                                      pop     es
   127 000000B3 CF                                      IRETD                           
   128 000000B4                                  