     1 00000000                                 ;汇编语言实现与底层硬件的交互逻辑,用C调用底层硬件接口实现上层逻辑
     2 00000000                                 ;nask_func
     3 00000000                                 ;TAB = 4
     4 00000000                                 
     5 00000000                                 ;提供该接口文件信息
     6 00000000                                 [FORMAT "WCOFF"]                        ;制作目标文件的格式
     7 00000000                                 [bits 32]                               ;制作32位模式的机器语言
     8 00000000                                 [instrset "i486p"]                      ; for 486(using nask)
     9 00000000                                 [FILE "naskfunc.nas"]                   ;源文件名
    10 00000000                                 
    11 00000000                                 GLOBAL          _io_hlt                     ;程序中包含的函数名       
    12 00000000                                 GLOBAL          _io_cli,_io_sti,_io_stihlt
    13 00000000                                 GLOBAL          _io_in8,_io_in16,_io_in32
    14 00000000                                 GLOBAL          _io_out8,_io_out16,_io_out32
    15 00000000                                 GLOBAL          _io_load_eflags,_io_store_eflags         
    16 00000000                                 GLOBAL          _load_gdtr,_load_idtr
    17 00000000                                 GLOBAL          _load_cr0,_store_cr0
    18 00000000                                 GLOBAL          _load_tr
    19 00000000                                 GLOBAL          _asm_inthandler21,_asm_inthandler27,_asm_inthandler2c,_asm_inthandler20
    20 00000000                                 GLOBAL          _memtest_sub
    21 00000000                                 GLOBAL          _farjmp
    22 00000000                                 EXTERN          _inthandler20,_inthandler21,_inthandler27,_inthandler2c       ;中断处理程序 ,extern表示函数声明在外部 
    23                                          [SECTION .text]
    24 00000000                                 
    25 00000000                                 _io_hlt:                                ;void io_hlt(void),函数声明+定义
    26 00000000 F4                                      hlt
    27 00000001 C3                                      RET
    28 00000002                                 
    29 00000002                                 _io_cli:                                ;中断标志置为0
    30 00000002 FA                                      cli
    31 00000003 C3                                      RET
    32 00000004                                 
    33 00000004                                 _io_sti:                                ;中断标志置为1
    34 00000004 FB                                      sti
    35 00000005 C3                                      RET 
    36 00000006                                 
    37 00000006                                 _io_stihlt:             ; void io_stihlt(void);
    38 00000006 FB                                      sti
    39 00000007 F4                                      hlt
    40 00000008 C3                                      RET
    41 00000009                                 
    42 00000009                                 _io_in8:
    43 00000009 8B 54 24 04                             mov     edx,[esp+4]
    44 0000000D B8 00000000                             mov     eax,0
    45 00000012 EC                                      in      al,dx
    46 00000013 C3                                      RET
    47 00000014                                 _io_in16:
    48 00000014 8B 54 24 04                             mov     edx,[esp+4]
    49 00000018 B8 00000000                             mov     eax,0
    50 0000001D 66 ED                                   in      ax,dx
    51 0000001F C3                                      RET
    52 00000020                                 _io_in32:
    53 00000020 8B 54 24 04                             mov     edx,[esp+4]
    54 00000024 ED                                      in      eax,dx
    55 00000025 C3                                      RET
    56 00000026                                 _io_out8:             
    57 00000026 8B 54 24 04                             mov     edx,[esp+4]
    58 0000002A 8A 44 24 08                             mov     al,[esp+8]
    59 0000002E EE                                      out     dx,al
    60 0000002F C3                                      RET    
    61 00000030                                 _io_out16:
    62 00000030 8B 54 24 04                             mov     edx,[esp+4]
    63 00000034 8B 44 24 08                             mov     eax,[esp+8]
    64 00000038 66 EF                                   out     dx,ax
    65 0000003A C3                                      RET
    66 0000003B                                 _io_out32:
    67 0000003B 8B 54 24 04                             mov     edx,[esp+4]     ;接口
    68 0000003F 8B 44 24 08                             mov     eax,[esp+8]     ;数据
    69 00000043 EF                                      out     dx,EAX
    70 00000044 C3                                      RET
    71 00000045                                 
    72 00000045                                 _io_load_eflags:                
    73 00000045 9C                                      pushfd                  
    74 00000046 58                                      pop     eax             
    75 00000047 C3                                      RET
    76 00000048                                 
    77 00000048                                 _io_store_eflags:
    78 00000048 8B 44 24 04                             mov     eax,[esp+4]     ;esp栈底指针
    79 0000004C 50                                      push    eax
    80 0000004D 9D                                      popfd
    81 0000004E C3                                      RET    
    82 0000004F                                 
    83 0000004F                                 _load_gdtr:
    84 0000004F 66 8B 44 24 04                          mov     ax,[esp+4]
    85 00000054 66 89 44 24 06                          mov     [esp+6],ax
    86 00000059 0F 01 54 24 06                          LGDT    [esp+6]
    87 0000005E C3                                      RET
    88 0000005F                                 _load_idtr:
    89 0000005F 66 8B 44 24 04                          mov     ax,[esp+4]
    90 00000064 66 89 44 24 06                          mov     [esp+6],ax
    91 00000069 0F 01 5C 24 06                          LIDT    [esp+6]
    92 0000006E C3                                      RET
    93 0000006F                                 
    94 0000006F                                 _load_cr0:      ;int store_cr0(void)
    95 0000006F 0F 20 C0                                mov     eax,CR0
    96 00000072 C3                                      RET
    97 00000073                                 
    98 00000073                                 _store_cr0:     ;void store_cr0(int cr0)
    99 00000073 8B 44 24 04                             mov     eax,[esp+4]
   100 00000077 0F 22 C0                                mov     CR0,EAX
   101 0000007A C3                                      RET
   102 0000007B                                 
   103 0000007B                                 _load_tr:       ;void load_tr(int tr) 写入tr寄存器
   104 0000007B 0F 00 5C 24 04                          ltr     [esp+4]
   105 00000080 C3                                      RET
   106 00000081                                 
   107 00000081                                 _memtest_sub:   ;unsigned int memtest_sub(unsigned int start,unsigned int end);(内存检查函数)
   108 00000081 57                                      push    edi             
   109 00000082 56                                      push    esi
   110 00000083 53                                      push    ebx
   111 00000084 BE AA55AA55                             mov     esi,0xaa55aa55                          ;pat0 = 0xaa55aa55
   112 00000089 BF 55AA55AA                             mov     edi,0x55aa55aa                          ;pat1 = 0x55aa55aa
   113 0000008E 8B 44 24 10                             mov     eax,[esp+12+4]                          ;i = start
   114 00000092                                         mts_loop:
   115 00000092 89 C3                                           mov     ebx,eax                         
   116 00000094 81 C3 00000FFC                                  add     ebx,0xffc                       ;p = i + 0xffc
   117 0000009A 8B 13                                           mov     edx,[ebx]                       ;old = *p
   118 0000009C 89 33                                           mov     [ebx],esi                       ;*p = pat0
   119 0000009E 83 33 FF                                        xor     DWORD [ebx],0xffffffff          ;*p ^= 0xffffffff
   120 000000A1 3B 3B                                           cmp     edi,[ebx]                       ;if(*p != pat1) goto fin
   121 000000A3 75 18                                           jne     mts_fin
   122 000000A5 83 33 FF                                        xor     DWORD [ebx],0xffffffff          ;*p ^= 0xffffffff 
   123 000000A8 3B 33                                           cmp     esi,[ebx]                       ;if(*p != pat0) goto fin
   124 000000AA 75 11                                           jne     mts_fin
   125 000000AC 89 13                                           mov     [ebx],edx                       ;*p = old
   126 000000AE 05 00001000                                     add     eax,0x1000                      ;i += 0x1000
   127 000000B3 3B 44 24 14                                     cmp     eax,[esp+12+8]                  ;if(i<=end) goto loop
   128 000000B7                                                 
   129 000000B7 76 D9                                           jbe     mts_loop
   130 000000B9 5B                                              pop     ebx
   131 000000BA 5E                                              pop     esi
   132 000000BB 5F                                              pop     edi
   133 000000BC C3                                              RET
   134 000000BD                                         mts_fin:
   135 000000BD 89 13                                           mov     [ebx],edx                       ;*p = old
   136 000000BF 5B                                              pop     ebx
   137 000000C0 5E                                              pop     esi
   138 000000C1 5F                                              pop     edi
   139 000000C2 C3                                              RET
   140 000000C3                                 ;中断信号处理器(PIC)
   141 000000C3                                  _asm_inthandler20:
   142 000000C3 06                                      push    ES
   143 000000C4 1E                                      push    DS
   144 000000C5 60                                      PUSHAD
   145 000000C6 89 E0                                   mov     EAX,esp
   146 000000C8 50                                      push    EAX
   147 000000C9 66 8C D0                                mov     ax,SS
   148 000000CC 8E D8                                   mov     ds,ax
   149 000000CE 8E C0                                   mov     es,ax
   150 000000D0 E8 [00000000]                           call    _inthandler20
   151 000000D5 58                                      pop     eax
   152 000000D6 61                                      POPAD
   153 000000D7 1F                                      pop     ds
   154 000000D8 07                                      pop     es
   155 000000D9 CF                                      IRETD            
   156 000000DA                                 _asm_inthandler21:                      ;使用栈结构将寄存器返回中断前状态
   157 000000DA 06                                      push    ES
   158 000000DB 1E                                      push    DS
   159 000000DC 60                                      PUSHAD
   160 000000DD 89 E0                                   mov     EAX,ESP
   161 000000DF 50                                      push    EAX
   162 000000E0 66 8C D0                                mov     ax,SS
   163 000000E3 8E D8                                   mov     ds,ax
   164 000000E5 8E C0                                   mov     es,ax
   165 000000E7 E8 [00000000]                           call    _inthandler21
   166 000000EC 58                                      pop     eax
   167 000000ED 61                                      POPAD
   168 000000EE 1F                                      pop     ds
   169 000000EF 07                                      pop     es
   170 000000F0 CF                                      IRETD                           ;中断程序中只能使用IRETD返回
   171 000000F1                                 _asm_inthandler27:                      
   172 000000F1 06                                      push    ES
   173 000000F2 1E                                      push    DS
   174 000000F3 60                                      PUSHAD
   175 000000F4 89 E0                                   mov     EAX,esp
   176 000000F6 50                                      push    EAX
   177 000000F7 66 8C D0                                mov     ax,SS
   178 000000FA 8E D8                                   mov     ds,ax
   179 000000FC 8E C0                                   mov     es,ax
   180 000000FE E8 [00000000]                           call    _inthandler27
   181 00000103 58                                      pop     eax
   182 00000104 61                                      POPAD
   183 00000105 1F                                      pop     ds
   184 00000106 07                                      pop     es
   185 00000107 CF                                      IRETD                           
   186 00000108                                  
   187 00000108                                  _asm_inthandler2c:                      
   188 00000108 06                                      push    ES
   189 00000109 1E                                      push    DS
   190 0000010A 60                                      PUSHAD
   191 0000010B 89 E0                                   mov     EAX,esp
   192 0000010D 50                                      push    EAX
   193 0000010E 66 8C D0                                mov     ax,SS
   194 00000111 8E D8                                   mov     ds,ax
   195 00000113 8E C0                                   mov     es,ax
   196 00000115 E8 [00000000]                           call    _inthandler2c
   197 0000011A 58                                      pop     eax
   198 0000011B 61                                      POPAD
   199 0000011C 1F                                      pop     ds
   200 0000011D 07                                      pop     es
   201 0000011E CF                                      IRETD                           
   202 0000011F                                 
   203 0000011F                                 _farjmp:        ;void farjmp(int eip,int cs)
   204 0000011F FF 6C 24 04                             jmp     FAR [ESP+4]
   205 00000123 C3                                      RET
