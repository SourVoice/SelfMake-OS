     1 00000000                                 ;汇编语言实现与底层硬件的交互逻辑,用C调用底层硬件接口实现上层逻辑
     2 00000000                                 ;nask_func
     3 00000000                                 ;TAB = 4
     4 00000000                                 
     5 00000000                                 ;提供该接口文件信息
     6 00000000                                 [FORMAT "WCOFF"]                        ;制作目标文件的格式
     7 00000000                                 [bits 32]                               ;制作32位模式的机器语言
     8 00000000                                 [instrset "i486p"]                      ; for 486(using nask)
     9 00000000                                 [FILE "naskfunc.nas"]                   ;源文件名
    10 00000000                                 
    11 00000000                                 GLOBAL          _io_hlt                     ;程序中包含的函数名       
    12 00000000                                 GLOBAL          _io_cli,_io_sti,_io_stihlt
    13 00000000                                 GLOBAL          _io_in8,_io_in16,_io_in32
    14 00000000                                 GLOBAL          _io_out8,_io_out16,_io_out32
    15 00000000                                 GLOBAL          _io_load_eflags,_io_store_eflags         
    16 00000000                                 GLOBAL          _load_gdtr,_load_idtr
    17 00000000                                 GLOBAL          _load_cr0,_store_cr0
    18 00000000                                 GLOBAL          _load_tr
    19 00000000                                 GLOBAL          _asm_inthandler20,_asm_inthandler21,_asm_inthandler27,_asm_inthandler2c
    20 00000000                                 GLOBAL          _memtest_sub
    21 00000000                                 GLOBAL          _farjmp
    22 00000000                                 EXTERN          _inthandler20,_inthandler21,_inthandler27,_inthandler2c       ;中断处理程序 ,extern表示函数声明在外部 
    23                                          [SECTION .text]
    24 00000000                                 
    25 00000000                                 _io_hlt:                                ;void io_hlt(void),函数声明+定义
    26 00000000 F4                                      hlt
    27 00000001 C3                                      RET
    28 00000002                                 
    29 00000002                                 _io_cli:                                ;void io_cli(void),中断标志置为0
    30 00000002 FA                                      cli
    31 00000003 C3                                      RET
    32 00000004                                 
    33 00000004                                 _io_sti:                                ;void io_sti(),中断标志置为1
    34 00000004 FB                                      sti
    35 00000005 C3                                      RET 
    36 00000006                                 
    37 00000006                                 _io_stihlt:                             ;void io_stihlt(void);
    38 00000006 FB                                      sti
    39 00000007 F4                                      hlt
    40 00000008 C3                                      RET
    41 00000009                                 
    42 00000009                                 _io_in8:                                ;int io_in8(int port);
    43 00000009 8B 54 24 04                             mov     edx,[esp+4]             ;port
    44 0000000D B8 00000000                             mov     eax,0
    45 00000012 EC                                      in      al,dx
    46 00000013 C3                                      RET
    47 00000014                                 
    48 00000014                                 _io_in16:                               ;int io_int16(int port);
    49 00000014 8B 54 24 04                             mov     edx,[esp+4]             ;port
    50 00000018 B8 00000000                             mov     eax,0
    51 0000001D 66 ED                                   in      ax,dx
    52 0000001F C3                                      RET
    53 00000020                                 
    54 00000020                                 _io_in32:                               ;int io_in32(int port);
    55 00000020 8B 54 24 04                             mov     edx,[esp+4]             ;port
    56 00000024 ED                                      in      eax,dx
    57 00000025 C3                                      RET
    58 00000026                                 
    59 00000026                                 _io_out8:                               ;void io_out8(int port,int data);
    60 00000026 8B 54 24 04                             mov     edx,[esp+4]             ;port
    61 0000002A 8A 44 24 08                             mov     al,[esp+8]              ;data
    62 0000002E EE                                      out     dx,al
    63 0000002F C3                                      RET    
    64 00000030                                 
    65 00000030                                 _io_out16:                              ;void io_out16(int port,int data);
    66 00000030 8B 54 24 04                             mov     edx,[esp+4]             ;port
    67 00000034 8B 44 24 08                             mov     eax,[esp+8]             ;data
    68 00000038 66 EF                                   out     dx,ax
    69 0000003A C3                                      RET
    70 0000003B                                 
    71 0000003B                                 _io_out32:                              ;void io_out32(int port,int data);
    72 0000003B 8B 54 24 04                             mov     edx,[esp+4]             ;接口
    73 0000003F 8B 44 24 08                             mov     eax,[esp+8]             ;数据
    74 00000043 EF                                      out     dx,EAX
    75 00000044 C3                                      RET
    76 00000045                                 
    77 00000045                                 _io_load_eflags:                        ;int io_load_eflags(void)
    78 00000045 9C                                      pushfd                          ;push eflags
    79 00000046 58                                      pop     eax                    
    80 00000047 C3                                      RET
    81 00000048                                 
    82 00000048                                 _io_store_eflags:                       ;void io_store_eflags(int eflags)
    83 00000048 8B 44 24 04                             mov     eax,[esp+4]             ;esp栈底指针
    84 0000004C 50                                      push    eax
    85 0000004D 9D                                      popfd                           ;pop eflags
    86 0000004E C3                                      RET    
    87 0000004F                                 
    88 0000004F                                 _load_gdtr:                             ;void load_gdtr(int limit,int addr)
    89 0000004F 66 8B 44 24 04                          mov     ax,[esp+4]              ;limit                    
    90 00000054 66 89 44 24 06                          mov     [esp+6],ax
    91 00000059 0F 01 54 24 06                          LGDT    [esp+6]
    92 0000005E C3                                      RET
    93 0000005F                                 
    94 0000005F                                 _load_idtr:                             ;void load_idtr(int limit,int add);
    95 0000005F 66 8B 44 24 04                          mov     ax,[esp+4]              ;limit
    96 00000064 66 89 44 24 06                          mov     [esp+6],ax
    97 00000069 0F 01 5C 24 06                          LIDT    [esp+6]
    98 0000006E C3                                      RET
    99 0000006F                                 
   100 0000006F                                 _load_cr0:      ;int store_cr0(void)
   101 0000006F 0F 20 C0                                mov     eax,CR0
   102 00000072 C3                                      RET
   103 00000073                                 
   104 00000073                                 _store_cr0:     ;void store_cr0(int cr0)
   105 00000073 8B 44 24 04                             mov     eax,[esp+4]
   106 00000077 0F 22 C0                                mov     CR0,EAX
   107 0000007A C3                                      RET
   108 0000007B                                 
   109 0000007B                                 _load_tr:       ;void load_tr(int tr) 写入tr寄存器
   110 0000007B 0F 00 5C 24 04                          ltr     [esp+4]         ;tr
   111 00000080 C3                                      RET
   112 00000081                                 
   113 00000081                                 ;中断信号处理器(PIC)
   114 00000081                                  _asm_inthandler20:
   115 00000081 06                                      push    ES
   116 00000082 1E                                      push    DS
   117 00000083 60                                      PUSHAD
   118 00000084 89 E0                                   mov     EAX,esp
   119 00000086 50                                      push    EAX
   120 00000087 66 8C D0                                mov     ax,SS
   121 0000008A 8E D8                                   mov     ds,ax
   122 0000008C 8E C0                                   mov     es,ax
   123 0000008E E8 [00000000]                           call    _inthandler20
   124 00000093 58                                      pop     eax
   125 00000094 61                                      POPAD
   126 00000095 1F                                      pop     ds
   127 00000096 07                                      pop     es
   128 00000097 CF                                      IRETD            
   129 00000098                                 _asm_inthandler21:                      ;使用栈结构将寄存器返回中断前状态
   130 00000098 06                                      push    ES
   131 00000099 1E                                      push    DS
   132 0000009A 60                                      PUSHAD
   133 0000009B 89 E0                                   mov     EAX,ESP
   134 0000009D 50                                      push    EAX
   135 0000009E 66 8C D0                                mov     ax,SS
   136 000000A1 8E D8                                   mov     ds,ax
   137 000000A3 8E C0                                   mov     es,ax
   138 000000A5 E8 [00000000]                           call    _inthandler21
   139 000000AA 58                                      pop     eax
   140 000000AB 61                                      POPAD
   141 000000AC 1F                                      pop     ds
   142 000000AD 07                                      pop     es
   143 000000AE CF                                      IRETD                           ;中断程序中只能使用IRETD返回
   144 000000AF                                 _asm_inthandler27:                      
   145 000000AF 06                                      push    ES
   146 000000B0 1E                                      push    DS
   147 000000B1 60                                      PUSHAD
   148 000000B2 89 E0                                   mov     EAX,esp
   149 000000B4 50                                      push    EAX
   150 000000B5 66 8C D0                                mov     ax,SS
   151 000000B8 8E D8                                   mov     ds,ax
   152 000000BA 8E C0                                   mov     es,ax
   153 000000BC E8 [00000000]                           call    _inthandler27
   154 000000C1 58                                      pop     eax
   155 000000C2 61                                      POPAD
   156 000000C3 1F                                      pop     ds
   157 000000C4 07                                      pop     es
   158 000000C5 CF                                      IRETD                           
   159 000000C6                                  
   160 000000C6                                  _asm_inthandler2c:                      
   161 000000C6 06                                      push    ES
   162 000000C7 1E                                      push    DS
   163 000000C8 60                                      PUSHAD
   164 000000C9 89 E0                                   mov     EAX,esp
   165 000000CB 50                                      push    EAX
   166 000000CC 66 8C D0                                mov     ax,SS
   167 000000CF 8E D8                                   mov     ds,ax
   168 000000D1 8E C0                                   mov     es,ax
   169 000000D3 E8 [00000000]                           call    _inthandler2c
   170 000000D8 58                                      pop     eax
   171 000000D9 61                                      POPAD
   172 000000DA 1F                                      pop     ds
   173 000000DB 07                                      pop     es
   174 000000DC CF                                      IRETD                           
   175 000000DD                                 
   176 000000DD                                 _memtest_sub:   ;unsigned int memtest_sub(unsigned int start,unsigned int end);(内存检查函数)
   177 000000DD 57                                      push    edi             
   178 000000DE 56                                      push    esi
   179 000000DF 53                                      push    ebx
   180 000000E0 BE AA55AA55                             mov     esi,0xaa55aa55                          ;pat0 = 0xaa55aa55
   181 000000E5 BF 55AA55AA                             mov     edi,0x55aa55aa                          ;pat1 = 0x55aa55aa
   182 000000EA 8B 44 24 10                             mov     eax,[esp+12+4]                          ;i = start
   183 000000EE                                         mts_loop:
   184 000000EE 89 C3                                           mov     ebx,eax                         
   185 000000F0 81 C3 00000FFC                                  add     ebx,0xffc                       ;p = i + 0xffc
   186 000000F6 8B 13                                           mov     edx,[ebx]                       ;old = *p
   187 000000F8 89 33                                           mov     [ebx],esi                       ;*p = pat0
   188 000000FA 83 33 FF                                        xor     DWORD [ebx],0xffffffff          ;*p ^= 0xffffffff
   189 000000FD 3B 3B                                           cmp     edi,[ebx]                       ;if(*p != pat1) goto fin
   190 000000FF 75 18                                           jne     mts_fin
   191 00000101 83 33 FF                                        xor     DWORD [ebx],0xffffffff          ;*p ^= 0xffffffff 
   192 00000104 3B 33                                           cmp     esi,[ebx]                       ;if(*p != pat0) goto fin
   193 00000106 75 11                                           jne     mts_fin
   194 00000108 89 13                                           mov     [ebx],edx                       ;*p = old
   195 0000010A 05 00001000                                     add     eax,0x1000                      ;i += 0x1000
   196 0000010F 3B 44 24 14                                     cmp     eax,[esp+12+8]                  ;if(i<=end) goto loop
   197 00000113                                                 
   198 00000113 76 D9                                           jbe     mts_loop
   199 00000115 5B                                              pop     ebx
   200 00000116 5E                                              pop     esi
   201 00000117 5F                                              pop     edi
   202 00000118 C3                                              RET
   203 00000119                                         mts_fin:
   204 00000119 89 13                                           mov     [ebx],edx                       ;*p = old
   205 0000011B 5B                                              pop     ebx
   206 0000011C 5E                                              pop     esi
   207 0000011D 5F                                              pop     edi
   208 0000011E C3                                              RET
   209 0000011F                                                 
   210 0000011F                                 _farjmp:        ;void farjmp(int eip,int cs)
   211 0000011F FF 6C 24 04                             jmp     FAR [ESP+4]
   212 00000123 C3                                      RET
