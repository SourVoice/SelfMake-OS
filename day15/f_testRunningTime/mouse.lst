     1 00000000                                 [FORMAT "WCOFF"]
     2 00000000                                 [INSTRSET "i486p"]
     3 00000000                                 [OPTIMIZE 1]
     4 00000000                                 [OPTION 1]
     5 00000000                                 [BITS 32]
     6 00000000                                 	EXTERN	_io_out8
     7 00000000                                 	EXTERN	_io_in8
     8 00000000                                 	EXTERN	_fifo32_put
     9 00000000                                 	EXTERN	_wait_KBC_sendready
    10 00000000                                 [FILE "mouse.c"]
    11                                          [SECTION .text]
    12 00000000                                 	GLOBAL	_inthandler2c
    13 00000000                                 _inthandler2c:
    14 00000000 55                              	PUSH	EBP
    15 00000001 89 E5                           	MOV	EBP,ESP
    16 00000003 6A 64                           	PUSH	100
    17 00000005 68 000000A0                     	PUSH	160
    18 0000000A E8 [00000000]                   	CALL	_io_out8
    19 0000000F 6A 62                           	PUSH	98
    20 00000011 6A 20                           	PUSH	32
    21 00000013 E8 [00000000]                   	CALL	_io_out8
    22 00000018 6A 60                           	PUSH	96
    23 0000001A E8 [00000000]                   	CALL	_io_in8
    24 0000001F 03 05 [00000004]                	ADD	EAX,DWORD [_mousedata0]
    25 00000025 50                              	PUSH	EAX
    26 00000026 FF 35 [00000000]                	PUSH	DWORD [_mousefifo]
    27 0000002C E8 [00000000]                   	CALL	_fifo32_put
    28 00000031 C9                              	LEAVE
    29 00000032 C3                              	RET
    30 00000033                                 	GLOBAL	_enable_mouse
    31 00000033                                 _enable_mouse:
    32 00000033 55                              	PUSH	EBP
    33 00000034 89 E5                           	MOV	EBP,ESP
    34 00000036 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
    35 00000039 A3 [00000000]                   	MOV	DWORD [_mousefifo],EAX
    36 0000003E 8B 45 0C                        	MOV	EAX,DWORD [12+EBP]
    37 00000041 A3 [00000004]                   	MOV	DWORD [_mousedata0],EAX
    38 00000046 E8 [00000000]                   	CALL	_wait_KBC_sendready
    39 0000004B 68 000000D4                     	PUSH	212
    40 00000050 6A 64                           	PUSH	100
    41 00000052 E8 [00000000]                   	CALL	_io_out8
    42 00000057 E8 [00000000]                   	CALL	_wait_KBC_sendready
    43 0000005C 68 000000F4                     	PUSH	244
    44 00000061 6A 60                           	PUSH	96
    45 00000063 E8 [00000000]                   	CALL	_io_out8
    46 00000068 8B 45 10                        	MOV	EAX,DWORD [16+EBP]
    47 0000006B C6 40 03 00                     	MOV	BYTE [3+EAX],0
    48 0000006F C9                              	LEAVE
    49 00000070 C3                              	RET
    50 00000071                                 	GLOBAL	_mouse_decode
    51 00000071                                 _mouse_decode:
    52 00000071 55                              	PUSH	EBP
    53 00000072 89 E5                           	MOV	EBP,ESP
    54 00000074 56                              	PUSH	ESI
    55 00000075 53                              	PUSH	EBX
    56 00000076 8B 55 08                        	MOV	EDX,DWORD [8+EBP]
    57 00000079 8B 75 0C                        	MOV	ESI,DWORD [12+EBP]
    58 0000007C 8A 42 03                        	MOV	AL,BYTE [3+EDX]
    59 0000007F 84 C0                           	TEST	AL,AL
    60 00000081 75 14                           	JNE	L4
    61 00000083 81 FE 000000FA                  	CMP	ESI,250
    62 00000089 74 06                           	JE	L13
    63 0000008B                                 L12:
    64 0000008B 31 C0                           	XOR	EAX,EAX
    65 0000008D                                 L3:
    66 0000008D 5B                              	POP	EBX
    67 0000008E 5E                              	POP	ESI
    68 0000008F 5D                              	POP	EBP
    69 00000090 C3                              	RET
    70 00000091                                 L13:
    71 00000091 C6 42 03 01                     	MOV	BYTE [3+EDX],1
    72 00000095 EB F4                           	JMP	L12
    73 00000097                                 L4:
    74 00000097 3C 01                           	CMP	AL,1
    75 00000099 74 65                           	JE	L14
    76 0000009B 3C 02                           	CMP	AL,2
    77 0000009D 74 56                           	JE	L15
    78 0000009F 3C 03                           	CMP	AL,3
    79 000000A1 74 05                           	JE	L16
    80 000000A3 83 C8 FF                        	OR	EAX,-1
    81 000000A6 EB E5                           	JMP	L3
    82 000000A8                                 L16:
    83 000000A8 89 F0                           	MOV	EAX,ESI
    84 000000AA 8A 1A                           	MOV	BL,BYTE [EDX]
    85 000000AC 88 42 02                        	MOV	BYTE [2+EDX],AL
    86 000000AF 81 E6 000000FF                  	AND	ESI,255
    87 000000B5 89 D8                           	MOV	EAX,EBX
    88 000000B7 89 72 08                        	MOV	DWORD [8+EDX],ESI
    89 000000BA 83 E0 07                        	AND	EAX,7
    90 000000BD 89 42 0C                        	MOV	DWORD [12+EDX],EAX
    91 000000C0 88 D8                           	MOV	AL,BL
    92 000000C2 0F B6 4A 01                     	MOVZX	ECX,BYTE [1+EDX]
    93 000000C6 83 E0 10                        	AND	EAX,16
    94 000000C9 89 4A 04                        	MOV	DWORD [4+EDX],ECX
    95 000000CC C6 42 03 01                     	MOV	BYTE [3+EDX],1
    96 000000D0 84 C0                           	TEST	AL,AL
    97 000000D2 74 09                           	JE	L10
    98 000000D4 81 C9 FFFFFF00                  	OR	ECX,-256
    99 000000DA 89 4A 04                        	MOV	DWORD [4+EDX],ECX
   100 000000DD                                 L10:
   101 000000DD 83 E3 20                        	AND	EBX,32
   102 000000E0 84 DB                           	TEST	BL,BL
   103 000000E2 74 07                           	JE	L11
   104 000000E4 81 4A 08 FFFFFF00               	OR	DWORD [8+EDX],-256
   105 000000EB                                 L11:
   106 000000EB F7 5A 08                        	NEG	DWORD [8+EDX]
   107 000000EE B8 00000001                     	MOV	EAX,1
   108 000000F3 EB 98                           	JMP	L3
   109 000000F5                                 L15:
   110 000000F5 89 F0                           	MOV	EAX,ESI
   111 000000F7 88 42 01                        	MOV	BYTE [1+EDX],AL
   112 000000FA C6 42 03 03                     	MOV	BYTE [3+EDX],3
   113 000000FE EB 8B                           	JMP	L12
   114 00000100                                 L14:
   115 00000100 89 F0                           	MOV	EAX,ESI
   116 00000102 25 000000C8                     	AND	EAX,200
   117 00000107 83 F8 08                        	CMP	EAX,8
   118 0000010A 0F 85 FFFFFF7B                  	JNE	L12
   119 00000110 89 F0                           	MOV	EAX,ESI
   120 00000112 88 02                           	MOV	BYTE [EDX],AL
   121 00000114 C6 42 03 02                     	MOV	BYTE [3+EDX],2
   122 00000118 E9 FFFFFF6E                     	JMP	L12
   123 0000011D                                 	GLOBAL	_mousefifo
   124                                          [SECTION .data]
   125 00000000                                 	ALIGNB	4
   126 00000000                                 _mousefifo:
   127 00000000 00 00 00 00                     	RESB	4
   128 00000004                                 	GLOBAL	_mousedata0
   129                                          [SECTION .data]
   130 00000004                                 	ALIGNB	4
   131 00000004                                 _mousedata0:
   132 00000004 00 00 00 00                     	RESB	4
