     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式	
     5 00000000                                 [INSTRSET "i486p"]				; 使用到486为止的指令
     6 00000000                                 [BITS 32]						; 3制作32位模式用的机器语言
     7 00000000                                 [FILE "naskfunc.nas"]			; 文件名
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_load_tr
    16 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    17 00000000                                 		GLOBAL	_asm_inthandler27, _asm_inthandler2c
    18 00000000                                 		GLOBAL	_asm_inthandler0c,_asm_inthandler0d
    19 00000000                                 		GLOBAL	_memtest_sub
    20 00000000                                 		GLOBAL	_farjmp, _farcall
    21 00000000                                 		GLOBAL	_asm_hrb_api,_asm_end_app
    22 00000000                                 		GLOBAL 	 _start_app
    23 00000000                                 		EXTERN	_inthandler20, _inthandler21
    24 00000000                                 		EXTERN	_inthandler27, _inthandler2c
    25 00000000                                 		EXTERN	_inthandler0c,_inthandler0d
    26 00000000                                 		EXTERN	_hrb_api
    27 00000000                                 
    28                                          [SECTION .text]
    29 00000000                                 
    30 00000000                                 _io_hlt:	; void io_hlt(void);
    31 00000000 F4                              		HLT
    32 00000001 C3                              		RET
    33 00000002                                 
    34 00000002                                 _io_cli:	; void io_cli(void);
    35 00000002 FA                              		CLI
    36 00000003 C3                              		RET
    37 00000004                                 
    38 00000004                                 _io_sti:	; void io_sti(void);
    39 00000004 FB                              		STI
    40 00000005 C3                              		RET
    41 00000006                                 
    42 00000006                                 _io_stihlt:	; void io_stihlt(void);
    43 00000006 FB                              		STI
    44 00000007 F4                              		HLT
    45 00000008 C3                              		RET
    46 00000009                                 
    47 00000009                                 _io_in8:	; int io_in8(int port);
    48 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    49 0000000D B8 00000000                     		MOV		EAX,0
    50 00000012 EC                              		IN		AL,DX
    51 00000013 C3                              		RET
    52 00000014                                 
    53 00000014                                 _io_in16:	; int io_in16(int port);
    54 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    55 00000018 B8 00000000                     		MOV		EAX,0
    56 0000001D 66 ED                           		IN		AX,DX
    57 0000001F C3                              		RET
    58 00000020                                 
    59 00000020                                 _io_in32:	; int io_in32(int port);
    60 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    61 00000024 ED                              		IN		EAX,DX
    62 00000025 C3                              		RET
    63 00000026                                 
    64 00000026                                 _io_out8:	; void io_out8(int port, int data);
    65 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    66 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    67 0000002E EE                              		OUT		DX,AL
    68 0000002F C3                              		RET
    69 00000030                                 
    70 00000030                                 _io_out16:	; void io_out16(int port, int data);
    71 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    72 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    73 00000038 66 EF                           		OUT		DX,AX
    74 0000003A C3                              		RET
    75 0000003B                                 
    76 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    77 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    78 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    79 00000043 EF                              		OUT		DX,EAX
    80 00000044 C3                              		RET
    81 00000045                                 
    82 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    83 00000045 9C                              		PUSHFD		; PUSH EFLAGS 
    84 00000046 58                              		POP		EAX
    85 00000047 C3                              		RET
    86 00000048                                 
    87 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    88 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    89 0000004C 50                              		PUSH	EAX
    90 0000004D 9D                              		POPFD		; POP EFLAGS 
    91 0000004E C3                              		RET
    92 0000004F                                 
    93 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    94 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    95 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    96 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    97 0000005E C3                              		RET
    98 0000005F                                 
    99 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
   100 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   101 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   102 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   103 0000006E C3                              		RET
   104 0000006F                                 
   105 0000006F                                 _load_cr0:		; int load_cr0(void);
   106 0000006F 0F 20 C0                        		MOV		EAX,CR0
   107 00000072 C3                              		RET
   108 00000073                                 
   109 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   110 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   111 00000077 0F 22 C0                        		MOV		CR0,EAX
   112 0000007A C3                              		RET
   113 0000007B                                 
   114 0000007B                                 _load_tr:		; void load_tr(int tr);
   115 0000007B 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   116 00000080 C3                              		RET
   117 00000081                                 
   118 00000081                                 _asm_inthandler20:
   119 00000081 06                              		PUSH	ES
   120 00000082 1E                              		PUSH	DS
   121 00000083 60                              		PUSHAD
   122 00000084 89 E0                           		MOV		EAX,ESP
   123 00000086 50                              		PUSH	EAX
   124 00000087 66 8C D0                        		MOV		AX,SS
   125 0000008A 8E D8                           		MOV		DS,AX
   126 0000008C 8E C0                           		MOV		ES,AX
   127 0000008E E8 [00000000]                   		CALL	_inthandler20
   128 00000093 58                              		POP		EAX
   129 00000094 61                              		POPAD
   130 00000095 1F                              		POP		DS
   131 00000096 07                              		POP		ES
   132 00000097 CF                              		IRETD
   133 00000098                                 
   134 00000098                                 _asm_inthandler21:
   135 00000098 06                              		PUSH	ES
   136 00000099 1E                              		PUSH	DS
   137 0000009A 60                              		PUSHAD
   138 0000009B 89 E0                           		MOV		EAX,ESP
   139 0000009D 50                              		PUSH	EAX
   140 0000009E 66 8C D0                        		MOV		AX,SS
   141 000000A1 8E D8                           		MOV		DS,AX
   142 000000A3 8E C0                           		MOV		ES,AX
   143 000000A5 E8 [00000000]                   		CALL	_inthandler21
   144 000000AA 58                              		POP		EAX
   145 000000AB 61                              		POPAD
   146 000000AC 1F                              		POP		DS
   147 000000AD 07                              		POP		ES
   148 000000AE CF                              		IRETD
   149 000000AF                                 
   150 000000AF                                 _asm_inthandler27:
   151 000000AF 06                              		PUSH	ES
   152 000000B0 1E                              		PUSH	DS
   153 000000B1 60                              		PUSHAD
   154 000000B2 89 E0                           		MOV		EAX,ESP
   155 000000B4 50                              		PUSH	EAX
   156 000000B5 66 8C D0                        		MOV		AX,SS
   157 000000B8 8E D8                           		MOV		DS,AX
   158 000000BA 8E C0                           		MOV		ES,AX
   159 000000BC E8 [00000000]                   		CALL	_inthandler27
   160 000000C1 58                              		POP		EAX
   161 000000C2 61                              		POPAD
   162 000000C3 1F                              		POP		DS
   163 000000C4 07                              		POP		ES
   164 000000C5 CF                              		IRETD
   165 000000C6                                 
   166 000000C6                                 _asm_inthandler2c:
   167 000000C6 06                              		PUSH	ES
   168 000000C7 1E                              		PUSH	DS
   169 000000C8 60                              		PUSHAD
   170 000000C9 89 E0                           		MOV		EAX,ESP
   171 000000CB 50                              		PUSH	EAX
   172 000000CC 66 8C D0                        		MOV		AX,SS
   173 000000CF 8E D8                           		MOV		DS,AX
   174 000000D1 8E C0                           		MOV		ES,AX
   175 000000D3 E8 [00000000]                   		CALL	_inthandler2c
   176 000000D8 58                              		POP		EAX
   177 000000D9 61                              		POPAD
   178 000000DA 1F                              		POP		DS
   179 000000DB 07                              		POP		ES
   180 000000DC CF                              		IRETD
   181 000000DD                                 
   182 000000DD                                 _asm_inthandler0c:
   183 000000DD FB                              		STI
   184 000000DE 06                              		PUSH	ES
   185 000000DF 1E                              		PUSH	DS
   186 000000E0 60                              		PUSHAD
   187 000000E1 89 E0                           		MOV		EAX,ESP
   188 000000E3 50                              		PUSH	EAX
   189 000000E4 66 8C D0                        		MOV		AX,SS
   190 000000E7 8E D8                           		MOV		DS,AX
   191 000000E9 8E C0                           		MOV		ES,AX
   192 000000EB E8 [00000000]                   		CALL	_inthandler0c
   193 000000F0 83 F8 00                        		CMP		EAX,0
   194 000000F3 0F 85 00000091                  		JNE		_asm_end_app		
   195 000000F9 58                              		POP		EAX
   196 000000FA 61                              		POPAD
   197 000000FB 1F                              		POP		DS
   198 000000FC 07                              		POP		ES
   199 000000FD 83 C4 04                        		ADD		ESP,4			; INT 0x0d需要这句
   200 00000100 CF                              		IRETD
   201 00000101                                 
   202 00000101                                 _asm_inthandler0d:
   203 00000101 FB                              		STI
   204 00000102 06                              		PUSH	ES
   205 00000103 1E                              		PUSH	DS
   206 00000104 60                              		PUSHAD
   207 00000105 89 E0                           		MOV		EAX,ESP
   208 00000107 50                              		PUSH	EAX
   209 00000108 66 8C D0                        		MOV		AX,SS
   210 0000010B 8E D8                           		MOV		DS,AX
   211 0000010D 8E C0                           		MOV		ES,AX
   212 0000010F E8 [00000000]                   		CALL	_inthandler0d
   213 00000114 83 F8 00                        		CMP		EAX,0		
   214 00000117 75 71                           		JNE		_asm_end_app		
   215 00000119 58                              		POP		EAX
   216 0000011A 61                              		POPAD
   217 0000011B 1F                              		POP		DS
   218 0000011C 07                              		POP		ES
   219 0000011D 83 C4 04                        		ADD		ESP,4			; INT 0x0d需要这句
   220 00000120 CF                              		IRETD
   221 00000121                                 
   222 00000121                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   223 00000121 57                              		PUSH	EDI						; （由于还要使用EBX, ESI, EDI）
   224 00000122 56                              		PUSH	ESI
   225 00000123 53                              		PUSH	EBX
   226 00000124 BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   227 00000129 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   228 0000012E 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   229 00000132                                 mts_loop:
   230 00000132 89 C3                           		MOV		EBX,EAX
   231 00000134 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   232 0000013A 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   233 0000013C 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   234 0000013E 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   235 00000141 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   236 00000143 75 18                           		JNE		mts_fin
   237 00000145 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   238 00000148 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   239 0000014A 75 11                           		JNE		mts_fin
   240 0000014C 89 13                           		MOV		[EBX],EDX				; *p = old;
   241 0000014E 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   242 00000153 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   243 00000157 76 D9                           		JBE		mts_loop
   244 00000159 5B                              		POP		EBX
   245 0000015A 5E                              		POP		ESI
   246 0000015B 5F                              		POP		EDI
   247 0000015C C3                              		RET
   248 0000015D                                 mts_fin:
   249 0000015D 89 13                           		MOV		[EBX],EDX				; *p = old;
   250 0000015F 5B                              		POP		EBX
   251 00000160 5E                              		POP		ESI
   252 00000161 5F                              		POP		EDI
   253 00000162 C3                              		RET
   254 00000163                                 
   255 00000163                                 _farjmp:		; void farjmp(int eip, int cs);
   256 00000163 FF 6C 24 04                     		JMP		FAR	[ESP+4]				; eip, cs
   257 00000167 C3                              		RET
   258 00000168                                 
   259 00000168                                 _farcall:		; void farcall(int eip, int cs);
   260 00000168 FF 5C 24 04                     		CALL	FAR	[ESP+4]				; eip, cs
   261 0000016C C3                              		RET
   262 0000016D                                 
   263 0000016D                                 _asm_hrb_api:
   264 0000016D FB                              		STI
   265 0000016E 1E                              		PUSH	DS
   266 0000016F 06                              		PUSH	ES
   267 00000170 60                              		PUSHAD			; 用于保存的PUSH
   268 00000171 60                              		PUSHAD			; 用于向hrb_api传值的PUSH
   269 00000172 66 8C D0                        		MOV		AX,SS
   270 00000175 8E D8                           		MOV			DS,AX ; 将操作系统用段地址存入DS和ES
   271 00000177 8E C0                           		MOV		ES,AX
   272 00000179 E8 [00000000]                   		CALL	_hrb_api
   273 0000017E 83 F8 00                        		CMP			EAX,0 ; 当EAX不为0时程序结束
   274 00000181 75 07                           		JNE		_asm_end_app
   275 00000183 83 C4 20                        		ADD		ESP,32
   276 00000186 61                              		POPAD
   277 00000187 07                              		POP		ES
   278 00000188 1F                              		POP		DS
   279 00000189 CF                              		IRETD
   280 0000018A                                 _asm_end_app:
   281 0000018A                                 ;	EAX为tss.esp0的地址
   282 0000018A 8B 20                           		MOV		ESP,[EAX]
   283 0000018C C7 40 04 00000000               		MOV		DWORD [EAX+4],0
   284 00000193 61                              		POPAD
   285 00000194 C3                              		RET			; 返回cmd_app
   286 00000195                                 
   287 00000195                                 _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   288 00000195 60                              		PUSHAD								; 将32位寄存器的值全部保存起来
   289 00000196 8B 44 24 24                     		MOV			EAX,[ESP+36]	; 应用程序用EIP
   290 0000019A 8B 4C 24 28                     		MOV			ECX,[ESP+40]	; 应用程序用CS
   291 0000019E 8B 54 24 2C                     		MOV			EDX,[ESP+44]	; 应用程序用ESP
   292 000001A2 8B 5C 24 30                     		MOV			EBX,[ESP+48]	; 应用程序用DS/SS
   293 000001A6 8B 6C 24 34                     		MOV			EBP,[ESP+52]	; tss.esp0的地址
   294 000001AA 89 65 00                        		MOV			[EBP ],ESP		; 保存操作系统用ESP
   295 000001AD 8C 55 04                        		MOV			[EBP+4],SS		; 保存操作系统用SS
   296 000001B0 8E C3                           		MOV		ES,BX
   297 000001B2 8E DB                           		MOV		DS,BX
   298 000001B4 8E E3                           		MOV		FS,BX
   299 000001B6 8E EB                           		MOV		GS,BX
   300 000001B8                                 ; 下面调整栈，以免用RETF跳转到应用程序
   301 000001B8 83 C9 03                        		OR			ECX,3 				; 将应用程序用段号和3进行OR运算
   302 000001BB 83 CB 03                        		OR      EBX,3 				; 将应用程序用段号和3进行OR运算
   303 000001BE 53                              		PUSH		EBX						; 应用程序的SS
   304 000001BF 52                              		PUSH		EDX						; 应用程序的ESP
   305 000001C0 51                              		PUSH		ECX						; 应用程序的CS
   306 000001C1 50                              		PUSH		EAX						; 应用程序的EIP
   307 000001C2 CB                              		RETF
   308 000001C3                                 ; 应用程序结束后不会回到这里
